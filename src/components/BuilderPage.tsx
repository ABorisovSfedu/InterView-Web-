// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–º—É –¥–∏–∑–∞–π–Ω—É

import React, { useState, useEffect, useCallback } from 'react';
import { debounce } from 'lodash';
import { useNavigate } from 'react-router-dom';
import { DndContext, DragEndEvent, DragOverlay, DragStartEvent, closestCenter } from '@dnd-kit/core';
import { useDraggable, useDroppable } from '@dnd-kit/core';
import { CSS } from '@dnd-kit/utilities';
import { PageRenderer } from '../page-engine/PageRenderer';
import { usePageStore } from '../stores/usePageStore';
import { PageModel, Block } from '../page-engine/types';
import { VisualElement, ElementCategory, ElementTemplate } from '../types/visualElements';
import { elementLibrary, getElementsByCategory, searchElements, getTemplates } from '../lib/visualElementLibrary';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { ScrollArea } from './ui/scroll-area';
import { Separator } from './ui/separator';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Label } from './ui/label';
import { Slider } from './ui/slider';
import { 
  ArrowLeft,
  ArrowRight, 
  Save, 
  Download, 
  Upload, 
  Plus, 
  Trash2, 
  Edit, 
  Copy, 
  Move,
  Settings,
  Eye,
  EyeOff,
  Lock,
  Unlock,
  Code,
  Palette,
  Layout,
  Smartphone,
  Monitor,
  Tablet,
  Brain,
  FileText,
  Image,
  Square,
  List,
  Type,
  MousePointer,
  Layers,
  ChevronDown,
  ChevronRight,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Search,
  Filter,
  Star,
  Clock,
  Users,
  Mail,
  Phone,
  Globe,
  MapPin,
  Calendar,
  Tag,
  Bookmark
} from 'lucide-react';
import { useTheme } from '../contexts/ThemeContext';
import { useAuth } from '../contexts/AuthContext';
import SharedHeader from './SharedHeader';
import apiClient from '../api/client';
import { createElementsFromMod3, Mod3LayoutResponse } from '../lib/templateSystem';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º VisualElement –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
type PageElement = VisualElement;

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
interface DraggableElementProps {
  element: PageElement;
  isSelected: boolean;
  onSelect: (elementId: string) => void;
  onUpdate: (elementId: string, updates: Partial<PageElement>) => void;
  onDelete: (elementId: string) => void;
}

const DraggableElement: React.FC<DraggableElementProps> = ({ 
  element, 
  isSelected, 
  onSelect, 
  onUpdate, 
  onDelete 
}) => {
  const { isDark } = useTheme();
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [resizeHandle, setResizeHandle] = useState<string | null>(null);
  const [resizeStart, setResizeStart] = useState({ x: 0, y: 0, width: 0, height: 0 });

  const handleMouseDown = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª–∏ –ª–∏ –Ω–∞ resize handle
    const target = e.target as HTMLElement;
    if (target.classList.contains('resize-handle')) {
      return; // –û–±—Ä–∞–±–æ—Ç–∫–∞ resize handle –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    setIsDragging(true);
    setDragOffset({
      x: e.clientX - element.x,
      y: e.clientY - element.y
    });
    onSelect(element.id);
    console.log('üéØ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:', element.name);
  };

  const handleResizeMouseDown = (e: React.MouseEvent, handle: string) => {
    e.preventDefault();
    e.stopPropagation();
    
    setIsResizing(true);
    setResizeHandle(handle);
    setResizeStart({
      x: e.clientX,
      y: e.clientY,
      width: element.width,
      height: element.height
    });
    onSelect(element.id);
    console.log(`üìè –ù–∞—á–∞—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${element.name} —Å handle: ${handle}`);
  };

  const handleMouseMove = (e: MouseEvent) => {
    if (isDragging) {
      const newX = e.clientX - dragOffset.x;
      const newY = e.clientY - dragOffset.y;
      
      // –î–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
      if (isFullWidthElement) {
        onUpdate(element.id, { 
          y: Math.max(0, Math.min(newY, 1500 - element.height)) 
        });
      } else {
        onUpdate(element.id, { 
          x: Math.max(0, Math.min(newX, 1200 - element.width)), 
          y: Math.max(0, Math.min(newY, 1500 - element.height)) 
        });
      }
    }
    
    if (isResizing && resizeHandle) {
      const deltaX = e.clientX - resizeStart.x;
      const deltaY = e.clientY - resizeStart.y;
      
      let newWidth = resizeStart.width;
      let newHeight = resizeStart.height;
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
      const minWidth = 50;
      const minHeight = 30;
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–µ –±–æ–ª—å—à–µ –∫–∞–Ω–≤–∞—Å–∞)
      const maxWidth = 1200 - element.x;
      const maxHeight = 1500 - element.y;
      
      // –î–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ—Ç—ã
      if (isFullWidthElement) {
        switch (resizeHandle) {
          case 's': // South (–Ω–∏–∂–Ω–∏–π)
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height + deltaY));
            break;
          case 'n': // North (–≤–µ—Ä—Ö–Ω–∏–π)
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height - deltaY));
            break;
          default:
            // –î–ª—è –¥—Ä—É–≥–∏—Ö handles –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
            return;
        }
        
        onUpdate(element.id, { 
          height: newHeight
        });
      } else {
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        switch (resizeHandle) {
          case 'se': // South East (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width + deltaX));
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height + deltaY));
            break;
          case 'sw': // South West (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width - deltaX));
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height + deltaY));
            break;
          case 'ne': // North East (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width + deltaX));
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height - deltaY));
            break;
          case 'nw': // North West (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width - deltaX));
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height - deltaY));
            break;
          case 'e': // East (–ø—Ä–∞–≤—ã–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width + deltaX));
            break;
          case 'w': // West (–ª–µ–≤—ã–π)
            newWidth = Math.max(minWidth, Math.min(maxWidth, resizeStart.width - deltaX));
            break;
          case 's': // South (–Ω–∏–∂–Ω–∏–π)
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height + deltaY));
            break;
          case 'n': // North (–≤–µ—Ä—Ö–Ω–∏–π)
            newHeight = Math.max(minHeight, Math.min(maxHeight, resizeStart.height - deltaY));
            break;
        }
        
        onUpdate(element.id, { 
          width: newWidth,
          height: newHeight
        });
      }
    }
  };

  const handleMouseUp = () => {
    if (isDragging) {
      console.log(`üìç –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ${element.name} –≤ –ø–æ–∑–∏—Ü–∏—é (${element.x}, ${element.y})`);
      setIsDragging(false);
    }
    
    if (isResizing) {
      console.log(`üìè –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${element.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${element.width}x${element.height}`);
      setIsResizing(false);
      setResizeHandle(null);
    }
  };

  useEffect(() => {
    if (isDragging || isResizing) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      return () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging, isResizing, dragOffset, resizeHandle, resizeStart, element.x, element.y, element.width, element.height]);

  const style = {
    opacity: (isDragging || isResizing) ? 0.5 : element.opacity,
    position: 'absolute' as const,
    left: element.x,
    top: element.y,
    width: element.width,
    height: element.height,
    zIndex: element.zIndex,
    border: isSelected 
      ? (isDark ? '2px solid #60a5fa' : '2px solid #3b82f6')
      : (isDark ? '1px solid #4b5563' : '1px solid #e5e7eb'),
    borderRadius: '4px',
    backgroundColor: isDark ? '#374151' : 'white',
    cursor: isDragging ? 'grabbing' : (isResizing ? 'resizing' : 'grab')
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∫–∞–Ω–≤–∞—Å–∞
  const isFullWidthElement = ['header', 'navbar', 'hero', 'footer'].includes(element.type);
  
  // –°—Ç–∏–ª–∏ –¥–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const fullWidthStyle = {
    ...style,
    left: 0,
    width: '1200px', // –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞
    border: isSelected 
      ? (isDark ? '2px solid #60a5fa' : '2px solid #3b82f6')
      : 'none', // –£–±–∏—Ä–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    borderRadius: 0 // –£–±–∏—Ä–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  };

  const elementStyle = isFullWidthElement ? fullWidthStyle : style;

  const renderElementContent = () => {
    switch (element.type) {
      case 'header':
        return (
          <div className={`w-full h-full flex items-center justify-between px-6 py-4 ${isDark ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} border-b ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="flex items-center gap-8">
              <div className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {element.content || '–õ–æ–≥–æ—Ç–∏–ø'}
              </div>
              <nav className="hidden md:flex items-center gap-6">
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ì–ª–∞–≤–Ω–∞—è</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–û –Ω–∞—Å</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–£—Å–ª—É–≥–∏</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
              </nav>
            </div>
            <div className="flex items-center gap-4">
              <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                –í–æ–π—Ç–∏
              </button>
            </div>
          </div>
        );
      case 'hero':
        return (
          <div className={`w-full h-full flex items-center justify-center px-6 py-12 ${isDark ? 'bg-gradient-to-br from-gray-800 to-gray-900 text-white' : 'bg-gradient-to-br from-blue-50 to-indigo-100 text-gray-900'}`}>
            <div className="text-center max-w-4xl">
              <h1 className={`text-4xl md:text-6xl font-bold mb-6 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {element.content || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'}
              </h1>
              <p className={`text-xl mb-8 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤–µ–±-—Å–∞–π—Ç—ã —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button className={`px-8 py-3 rounded-lg font-semibold ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                  –ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å
                </button>
                <button className={`px-8 py-3 rounded-lg font-semibold border ${isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-800' : 'border-gray-300 text-gray-700 hover:bg-gray-50'}`}>
                  –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
                </button>
              </div>
            </div>
          </div>
        );
      case 'heading':
        return (
          <div className={`w-full h-full flex items-center px-6 py-8 ${isDark ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'}`}>
            <h2 className={`text-3xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
              {element.content || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏'}
            </h2>
          </div>
        );
      case 'text':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'}`}>
            <div className="max-w-4xl">
              <p className={`text-lg leading-relaxed ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                {element.content || '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞. –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.'}
              </p>
            </div>
          </div>
        );
      case 'button':
        return (
          <div className={`w-full h-full flex items-center justify-center px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <button className={`px-8 py-3 rounded-lg font-semibold text-lg transition-all hover:scale-105 ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
              {element.content || '–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è'}
            </button>
          </div>
        );
      case 'navbar':
        return (
          <div className={`w-full h-full flex items-center justify-between px-6 py-4 ${isDark ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'} border-b ${isDark ? 'border-gray-700' : 'border-gray-200'}`}>
            <div className="flex items-center gap-8">
              <div className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                –õ–æ–≥–æ—Ç–∏–ø
              </div>
              <nav className="hidden md:flex items-center gap-6">
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ì–ª–∞–≤–Ω–∞—è</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–û –Ω–∞—Å</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–£—Å–ª—É–≥–∏</a>
                <a href="#" className={`hover:opacity-80 transition-opacity ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
              </nav>
            </div>
            <div className="flex items-center gap-4">
              <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                –í–æ–π—Ç–∏
              </button>
            </div>
          </div>
        );
      case 'search':
        return (
          <div className={`w-full h-full flex items-center justify-center px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="w-full max-w-md">
              <div className={`relative flex items-center border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'}`}>
                <Search className={`w-5 h-5 ml-3 ${isDark ? 'text-gray-400' : 'text-gray-500'}`} />
                <input 
                  type="text" 
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É..." 
                  className={`flex-1 py-3 px-3 bg-transparent border-none outline-none ${isDark ? 'text-white placeholder-gray-400' : 'text-gray-900 placeholder-gray-500'}`}
                />
                <button className={`px-4 py-2 mr-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                  –ù–∞–π—Ç–∏
                </button>
              </div>
            </div>
          </div>
        );
      case 'form':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="max-w-md mx-auto">
              <h3 className={`text-2xl font-bold mb-6 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
              </h3>
              <div className="space-y-4">
                <input 
                  type="text" 
                  placeholder="–í–∞—à–µ –∏–º—è" 
                  className={`w-full p-3 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300 bg-white text-gray-900 placeholder-gray-500'}`}
                />
                <input 
                  type="email" 
                  placeholder="Email" 
                  className={`w-full p-3 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300 bg-white text-gray-900 placeholder-gray-500'}`}
                />
                <textarea 
                  placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ" 
                  rows={4}
                  className={`w-full p-3 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700 text-white placeholder-gray-400' : 'border-gray-300 bg-white text-gray-900 placeholder-gray-500'}`}
                />
                <button className={`w-full py-3 rounded-lg font-semibold ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          </div>
        );
      case 'card':
      case 'cards':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-blue-600' : 'bg-blue-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  {element.content || '–£—Å–ª—É–≥–∞ 1'}
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                </p>
              </div>
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –£—Å–ª—É–≥–∞ 2
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                </p>
              </div>
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-purple-600' : 'bg-purple-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –£—Å–ª—É–≥–∞ 3
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
                </p>
              </div>
            </div>
          </div>
        );
      case 'productCard':
      case 'productGrid':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className={`border rounded-lg overflow-hidden ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`h-48 ${isDark ? 'bg-gray-600' : 'bg-gray-200'}`}></div>
                <div className="p-4">
                  <h3 className={`text-lg font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    {element.content || '–¢–æ–≤–∞—Ä 1'}
                  </h3>
                  <p className={`text-sm mb-3 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                  </p>
                  <div className="flex items-center justify-between">
                    <span className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      ‚ÇΩ1,999
                    </span>
                    <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                      –ö—É–ø–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
              <div className={`border rounded-lg overflow-hidden ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`h-48 ${isDark ? 'bg-gray-600' : 'bg-gray-200'}`}></div>
                <div className="p-4">
                  <h3 className={`text-lg font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –¢–æ–≤–∞—Ä 2
                  </h3>
                  <p className={`text-sm mb-3 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                  </p>
                  <div className="flex items-center justify-between">
                    <span className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      ‚ÇΩ2,499
                    </span>
                    <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                      –ö—É–ø–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
              <div className={`border rounded-lg overflow-hidden ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`h-48 ${isDark ? 'bg-gray-600' : 'bg-gray-200'}`}></div>
                <div className="p-4">
                  <h3 className={`text-lg font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –¢–æ–≤–∞—Ä 3
                  </h3>
                  <p className={`text-sm mb-3 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                  </p>
                  <div className="flex items-center justify-between">
                    <span className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      ‚ÇΩ3,999
                    </span>
                    <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                      –ö—É–ø–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
              <div className={`border rounded-lg overflow-hidden ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`h-48 ${isDark ? 'bg-gray-600' : 'bg-gray-200'}`}></div>
                <div className="p-4">
                  <h3 className={`text-lg font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –¢–æ–≤–∞—Ä 4
                  </h3>
                  <p className={`text-sm mb-3 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                    –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                  </p>
                  <div className="flex items-center justify-between">
                    <span className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      ‚ÇΩ4,999
                    </span>
                    <button className={`px-4 py-2 rounded ${isDark ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`}>
                      –ö—É–ø–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );
      case 'cta':
        return (
          <div className={`p-4 text-center rounded ${isDark ? 'bg-yellow-900 text-yellow-100' : 'bg-yellow-100 text-yellow-900'}`}>
            <div className="font-bold text-lg mb-2">
              {element.content || '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é!'}
            </div>
            <button className={`px-4 py-2 rounded ${isDark ? 'bg-yellow-600 text-white' : 'bg-yellow-500 text-white'}`}>
              –ù–∞—á–∞—Ç—å
            </button>
          </div>
        );
      case 'section':
      case 'container':
        return (
          <div className={`p-4 border-2 border-dashed rounded ${isDark ? 'border-gray-500 bg-gray-800' : 'border-gray-300 bg-gray-50'}`}>
            <div className={`text-center ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
              {element.content || '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä'}
            </div>
          </div>
        );
      case 'image':
      case 'gallery':
        return (
          <div className={`p-2 flex items-center justify-center border-2 border-dashed rounded ${isDark ? 'border-gray-500 bg-gray-800' : 'border-gray-300 bg-gray-50'}`}>
            <div className="text-center">
              <Image className={`w-8 h-8 mx-auto mb-2 ${isDark ? 'text-gray-500' : 'text-gray-400'}`} />
              <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                {element.type === 'gallery' ? '–ì–∞–ª–µ—Ä–µ—è' : '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
              </span>
            </div>
          </div>
        );
      case 'footer':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'}`}>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
              <div>
                <h3 className={`text-xl font-bold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –ö–æ–º–ø–∞–Ω–∏—è
                </h3>
                <div className={`space-y-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <p>–û –Ω–∞—Å</p>
                  <p>–ö–æ–º–∞–Ω–¥–∞</p>
                  <p>–ö–∞—Ä—å–µ—Ä–∞</p>
                  <p>–ù–æ–≤–æ—Å—Ç–∏</p>
                </div>
              </div>
              <div>
                <h3 className={`text-xl font-bold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –£—Å–ª—É–≥–∏
                </h3>
                <div className={`space-y-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <p>–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</p>
                  <p>–î–∏–∑–∞–π–Ω</p>
                  <p>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</p>
                  <p>–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥</p>
                </div>
              </div>
              <div>
                <h3 className={`text-xl font-bold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –ü–æ–¥–¥–µ—Ä–∂–∫–∞
                </h3>
                <div className={`space-y-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <p>–ü–æ–º–æ—â—å</p>
                  <p>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</p>
                  <p>API</p>
                  <p>–°—Ç–∞—Ç—É—Å</p>
                </div>
              </div>
              <div>
                <h3 className={`text-xl font-bold mb-4 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –ö–æ–Ω—Ç–∞–∫—Ç—ã
                </h3>
                <div className={`space-y-2 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  <p>+7 (999) 123-45-67</p>
                  <p>info@company.com</p>
                  <p>–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123</p>
                </div>
              </div>
            </div>
            <div className={`border-t mt-8 pt-8 text-center ${isDark ? 'border-gray-700 text-gray-400' : 'border-gray-300 text-gray-500'}`}>
              <p>¬© 2024 –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
          </div>
        );
      case 'list':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="max-w-2xl">
              <h3 className={`text-2xl font-bold mb-6 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                –°–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
              </h3>
              <ul className={`space-y-4 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                <li className="flex items-start gap-3">
                  <div className={`w-6 h-6 rounded-full mt-1 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                  <span>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–∑—ã–≤—á–∏–≤—ã–π –¥–∏–∑–∞–π–Ω</span>
                </li>
                <li className="flex items-start gap-3">
                  <div className={`w-6 h-6 rounded-full mt-1 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                  <span>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
                </li>
                <li className="flex items-start gap-3">
                  <div className={`w-6 h-6 rounded-full mt-1 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                  <span>–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
                </li>
                <li className="flex items-start gap-3">
                  <div className={`w-6 h-6 rounded-full mt-1 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                  <span>–ì–∏–±–∫–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã</span>
                </li>
              </ul>
            </div>
          </div>
        );
      case 'grid':
        return (
          <div className={`w-full h-full px-6 py-8 ${isDark ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-blue-600' : 'bg-blue-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –≠–ª–µ–º–µ–Ω—Ç 1
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ç–∫–∏
                </p>
              </div>
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-green-600' : 'bg-green-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –≠–ª–µ–º–µ–Ω—Ç 2
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ç–∫–∏
                </p>
              </div>
              <div className={`p-6 border rounded-lg ${isDark ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-white'} hover:shadow-lg transition-shadow`}>
                <div className={`w-12 h-12 rounded-lg mb-4 ${isDark ? 'bg-purple-600' : 'bg-purple-500'}`}></div>
                <h3 className={`text-xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –≠–ª–µ–º–µ–Ω—Ç 3
                </h3>
                <p className={`${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                  –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ç–∫–∏
                </p>
              </div>
            </div>
          </div>
        );
      default:
        return (
          <div className={`w-full h-full flex items-center justify-center px-6 py-8 ${isDark ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'}`}>
            <div className="text-center">
              <div className={`w-16 h-16 rounded-lg mb-4 mx-auto ${isDark ? 'bg-gray-600' : 'bg-gray-200'}`}></div>
              <h3 className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {element.name || element.type}
              </h3>
              <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {element.type}
              </p>
            </div>
          </div>
        );
    }
  };

  return (
    <div
      style={elementStyle}
      onMouseDown={handleMouseDown}
      onClick={() => onSelect(element.id)}
      className="group"
    >

      {/* Resize Handles - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
      {isSelected && (
        <>
          {/* –£–≥–ª–æ–≤—ã–µ handles - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          {!isFullWidthElement && (
            <>
              <div
                className="resize-handle absolute top-0 left-0 w-3 h-3 cursor-nw-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100"
                onMouseDown={(e) => handleResizeMouseDown(e, 'nw')}
              />
              <div
                className="resize-handle absolute top-0 right-0 w-3 h-3 cursor-ne-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100"
                onMouseDown={(e) => handleResizeMouseDown(e, 'ne')}
              />
              <div
                className="resize-handle absolute bottom-0 left-0 w-3 h-3 cursor-sw-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100"
                onMouseDown={(e) => handleResizeMouseDown(e, 'sw')}
              />
              <div
                className="resize-handle absolute bottom-0 right-0 w-3 h-3 cursor-se-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100"
                onMouseDown={(e) => handleResizeMouseDown(e, 'se')}
              />
            </>
          )}
          
          {/* –ë–æ–∫–æ–≤—ã–µ handles */}
          {!isFullWidthElement && (
            <>
              <div
                className="resize-handle absolute top-1/2 left-0 w-1 h-6 cursor-w-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100 transform -translate-y-1/2"
                onMouseDown={(e) => handleResizeMouseDown(e, 'w')}
              />
              <div
                className="resize-handle absolute top-1/2 right-0 w-1 h-6 cursor-e-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100 transform -translate-y-1/2"
                onMouseDown={(e) => handleResizeMouseDown(e, 'e')}
              />
            </>
          )}
          
          {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ handles - –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
          <div
            className="resize-handle absolute top-0 left-1/2 w-6 h-1 cursor-n-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100 transform -translate-x-1/2"
            onMouseDown={(e) => handleResizeMouseDown(e, 'n')}
          />
          <div
            className="resize-handle absolute bottom-0 left-1/2 w-6 h-1 cursor-s-resize bg-blue-500 border border-white rounded-sm opacity-80 hover:opacity-100 transform -translate-x-1/2"
            onMouseDown={(e) => handleResizeMouseDown(e, 's')}
          />
        </>
      )}

      {/* Element Content */}
      {renderElementContent()}

      {/* Selection Indicator */}
      {isSelected && (
        <div className="absolute -top-1 -left-1 -right-1 -bottom-1 border-2 border-blue-500 rounded pointer-events-none" />
      )}
    </div>
  );
};

// –ü–∞–Ω–µ–ª—å —Å–ª–æ–µ–≤
interface LayersPanelProps {
  elements: PageElement[];
  selectedElementId: string | null;
  onSelectElement: (elementId: string) => void;
  onToggleVisibility: (elementId: string) => void;
  onToggleLock: (elementId: string) => void;
  onDeleteElement: (elementId: string) => void;
}

const LayersPanel: React.FC<LayersPanelProps> = ({
  elements,
  selectedElementId,
  onSelectElement,
  onToggleVisibility,
  onToggleLock,
  onDeleteElement
}) => {
  const { isDark } = useTheme();
  
  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <div className={`w-6 h-6 rounded-lg flex items-center justify-center ${isDark ? 'bg-blue-500/20' : 'bg-blue-100'}`}>
            <Layers className={`w-4 h-4 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
          </div>
          <h3 className={`font-semibold text-sm ${isDark ? 'text-white' : 'text-gray-900'}`}>–°–ª–æ–∏</h3>
        </div>
        <Button 
          size="sm" 
          variant="ghost" 
          className={`h-8 w-8 p-0 rounded-lg ${isDark ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'}`}
          title="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–π"
        >
          <Plus className="w-4 h-4" />
        </Button>
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ —Å–ª–æ–µ–≤ */}
      <div className="space-y-2">
        {elements.map((element, index) => (
          <div
            key={element.id}
            className={`group relative flex items-center gap-3 p-3 rounded-xl cursor-pointer transition-all duration-200 hover:scale-[1.02] ${
              selectedElementId === element.id 
                ? (isDark 
                    ? 'bg-gradient-to-r from-blue-600/20 to-purple-600/20 border border-blue-500/30 shadow-lg shadow-blue-500/10' 
                    : 'bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 shadow-lg shadow-blue-500/5')
                : (isDark 
                    ? 'hover:bg-gray-700/50 border border-transparent hover:border-gray-600' 
                    : 'hover:bg-gray-50 border border-transparent hover:border-gray-200')
            }`}
            onClick={() => onSelectElement(element.id)}
          >
            {/* –ò–∫–æ–Ω–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ */}
            <div className={`w-8 h-8 rounded-lg flex items-center justify-center text-sm ${
              isDark ? 'bg-gray-700' : 'bg-gray-100'
            }`}>
              {element.icon}
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–µ */}
            <div className="flex-1 min-w-0">
              <div className={`font-medium text-sm truncate ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {element.name || element.type}
              </div>
              <div className={`text-xs truncate ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                –°–ª–æ–π {index + 1}
              </div>
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="flex items-center gap-1">
              <Button
                size="sm"
                variant="ghost"
                className={`h-7 w-7 p-0 rounded-lg ${isDark ? 'hover:bg-gray-600 text-gray-300' : 'hover:bg-gray-200 text-gray-600'}`}
                onClick={(e) => {
                  e.stopPropagation();
                  onToggleVisibility(element.id);
                }}
                title={element.visible ? '–°–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç' : '–ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç'}
              >
                {element.visible ? (
                  <Eye className="w-4 h-4" />
                ) : (
                  <EyeOff className="w-4 h-4" />
                )}
              </Button>
              
              <Button
                size="sm"
                variant="ghost"
                className={`h-7 w-7 p-0 rounded-lg ${isDark ? 'hover:bg-gray-600 text-gray-300' : 'hover:bg-gray-200 text-gray-600'}`}
                onClick={(e) => {
                  e.stopPropagation();
                  onToggleLock(element.id);
                }}
                title={element.locked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}
              >
                {element.locked ? (
                  <Lock className="w-4 h-4" />
                ) : (
                  <Unlock className="w-4 h-4" />
                )}
              </Button>
              
              <Button
                size="sm"
                variant="ghost"
                className={`h-7 w-7 p-0 rounded-lg ${isDark ? 'hover:bg-red-500/20 text-red-400' : 'hover:bg-red-50 text-red-600'}`}
                onClick={(e) => {
                  e.stopPropagation();
                  onDeleteElement(element.id);
                }}
                title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
              >
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –ü–∞–Ω–µ–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ —Å–≤–æ–π—Å—Ç–≤
interface InspectorPanelProps {
  selectedElement: PageElement | null;
  onUpdateElement: (elementId: string, updates: Partial<PageElement>) => void;
  onDuplicateElement: (elementId: string) => void;
  onDeleteElement: (elementId: string) => void;
}

const InspectorPanel: React.FC<InspectorPanelProps> = ({
  selectedElement,
  onUpdateElement,
  onDuplicateElement,
  onDeleteElement
}) => {
  const { isDark } = useTheme();
  
  if (!selectedElement) {
    return (
      <div className={`p-6 text-center rounded-xl ${isDark ? 'bg-gray-700/50 border border-gray-600' : 'bg-gray-100 border border-gray-200'}`}>
        <Settings className={`w-12 h-12 mx-auto mb-3 ${isDark ? 'text-gray-500' : 'text-gray-400'}`} />
        <h3 className={`text-sm font-semibold mb-1 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
          –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç
        </h3>
        <p className={`text-xs ${isDark ? 'text-gray-500' : 'text-gray-500'}`}>
          –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        </p>
      </div>
    );
  }

  const handlePropertyChange = (property: string, value: any) => {
    onUpdateElement(selectedElement.id, { [property]: value });
  };

  return (
    <div className="space-y-4">
      {/* –ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className={`p-4 rounded-xl ${isDark ? 'bg-gray-700/50 border border-gray-600' : 'bg-gray-100 border border-gray-200'}`}>
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${isDark ? 'bg-blue-600' : 'bg-blue-500'}`}>
              <Settings className="w-4 h-4 text-white" />
            </div>
            <div>
              <h3 className={`font-semibold text-sm ${isDark ? 'text-white' : 'text-gray-900'}`}>
                {selectedElement.name || selectedElement.type}
              </h3>
              <p className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                –¢–∏–ø: {selectedElement.type}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-1">
            <Button
              size="sm"
              variant="outline"
              onClick={() => onDuplicateElement(selectedElement.id)}
              className={`h-7 w-7 p-0 rounded-lg ${isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-600 hover:text-white' : 'border-gray-300 text-gray-600 hover:bg-gray-200 hover:text-gray-900'}`}
              title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
            >
              <Copy className="w-3 h-3" />
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={() => onDeleteElement(selectedElement.id)}
              className={`h-7 w-7 p-0 rounded-lg ${isDark ? 'border-gray-600 text-gray-300 hover:bg-red-600 hover:text-white hover:border-red-600' : 'border-gray-300 text-gray-600 hover:bg-red-100 hover:text-red-600 hover:border-red-300'}`}
              title="–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
            >
              <Trash2 className="w-3 h-3" />
            </Button>
          </div>
        </div>
      </div>

      <Separator className={isDark ? 'bg-gray-600' : 'bg-gray-200'} />

      {/* Position and Size */}
      <div className="space-y-2">
        <div className="grid grid-cols-2 gap-1.5">
          <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>X</Label>
            <Input
              type="number"
              value={selectedElement.x}
              onChange={(e) => handlePropertyChange('x', parseInt(e.target.value) || 0)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
            />
          </div>
          <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Y</Label>
            <Input
              type="number"
              value={selectedElement.y}
              onChange={(e) => handlePropertyChange('y', parseInt(e.target.value) || 0)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
            />
          </div>
        </div>

        <div className="grid grid-cols-2 gap-1.5">
        <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>W</Label>
            <Input
              type="number"
              value={selectedElement.width}
              onChange={(e) => handlePropertyChange('width', parseInt(e.target.value) || 0)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
          />
        </div>
          <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>H</Label>
            <Input
              type="number"
              value={selectedElement.height}
              onChange={(e) => handlePropertyChange('height', parseInt(e.target.value) || 0)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
            />
          </div>
          </div>

        <div className="grid grid-cols-2 gap-1.5">
          <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>Z</Label>
            <Input
              type="number"
              value={selectedElement.zIndex}
              onChange={(e) => handlePropertyChange('zIndex', parseInt(e.target.value) || 0)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
            />
          </div>
          <div>
            <Label className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>OPACITY</Label>
            <Input
              type="number"
              step="0.1"
              min="0"
              max="1"
              value={selectedElement.opacity}
              onChange={(e) => handlePropertyChange('opacity', parseFloat(e.target.value) || 1)}
              className={`h-6 text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
            />
          </div>
        </div>
      </div>

      <Separator className={isDark ? 'bg-gray-600' : 'bg-gray-200'} />

      {/* Content */}
      <div>
        <Label className={`text-xs mb-1 block ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>text</Label>
        <Textarea
          value={selectedElement.content}
          onChange={(e) => handlePropertyChange('content', e.target.value)}
          className={`min-h-[80px] text-xs ${isDark ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
          placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞"
        />
          </div>
            </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª–∏—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
interface ElementPaletteProps {
  onAddElement: (element: VisualElement) => void;
  onAddTemplate: (template: ElementTemplate) => void;
}

const ElementPalette: React.FC<ElementPaletteProps> = ({ onAddElement, onAddTemplate }) => {
  const { isDark } = useTheme();
  const [activeCategory, setActiveCategory] = useState<ElementCategory>('basic');
  const [showElements, setShowElements] = useState(false);

  const categories = Object.entries(elementLibrary.categories).filter(([key]) => key !== 'templates');
  
  const filteredElements = getElementsByCategory(activeCategory);

  const handleElementClick = (element: VisualElement) => {
    const newElement = {
      ...element,
      id: `${element.type}-${Date.now()}`,
      x: 0,
      y: 0
    };
    onAddElement(newElement);
  };

  const handleBackToCategories = () => {
    setShowElements(false);
  };

  const handleCategoryClick = (categoryKey: string) => {
    setActiveCategory(categoryKey as ElementCategory);
    setShowElements(true);
  };

  return (
    <div className="space-y-4">

      {!showElements ? (
        /* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */
        <div className="space-y-3">
          <h3 className={`text-sm font-semibold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
            –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
          </h3>
          <div className="grid grid-cols-2 gap-2">
            {categories.map(([key, category]) => (
              <Button
                key={key}
                size="sm"
                variant="ghost"
                onClick={() => handleCategoryClick(key)}
                className={`h-auto p-3 flex flex-col items-center gap-2 transition-all duration-300 hover:scale-105 ${
                  isDark 
                    ? 'hover:bg-gray-700/50 hover:border-gray-500' 
                    : 'hover:bg-gray-100 hover:border-gray-300'
                }`}
              >
                <div className={`text-lg transition-transform duration-300 group-hover:scale-105`}>
                  {category.icon}
                </div>
                <div className={`text-xs font-medium transition-colors duration-300 ${
                  isDark ? 'text-gray-300' : 'text-gray-600'
                }`}>
                  {category.name}
                </div>
              </Button>
            ))}
          </div>
        </div>
      ) : (
        /* –≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
        <div className="space-y-3">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Button
                size="sm"
                variant="ghost"
                onClick={handleBackToCategories}
                className={`p-1 h-8 w-8 ${isDark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
              >
                <ArrowLeft className="w-4 h-4" />
              </Button>
              <h3 className={`text-sm font-semibold ${isDark ? 'text-gray-200' : 'text-gray-800'}`}>
                {categories.find(([key]) => key === activeCategory)?.[1].name}
              </h3>
            </div>
            <div className={`text-xs px-2 py-1 rounded-full ${
              isDark ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'
            }`}>
              {filteredElements.length}
            </div>
          </div>
          
          <ScrollArea className="h-72">
            <div className="space-y-2 pr-2">
              {filteredElements.map((element) => (
                <div
                  key={element.id}
                  onClick={() => handleElementClick(element)}
                  className={`group relative p-4 border rounded-xl cursor-pointer transition-all duration-300 hover:scale-[1.02] hover:shadow-lg ${
                    isDark 
                      ? 'border-gray-600 hover:border-blue-400 hover:bg-gradient-to-r hover:from-gray-700/80 hover:to-gray-600/80 hover:shadow-blue-500/25' 
                      : 'border-gray-200 hover:border-blue-300 hover:bg-gradient-to-r hover:from-blue-50/80 hover:to-indigo-50/80 hover:shadow-blue-400/20'
                  }`}
                >
                  {/* –ò–∫–æ–Ω–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º —Ñ–æ–Ω–æ–º */}
                  <div className={`w-10 h-10 rounded-xl flex items-center justify-center text-xl mb-3 transition-all duration-300 group-hover:scale-110 ${
                    isDark 
                      ? 'bg-gradient-to-br from-blue-500/20 to-purple-500/20 group-hover:from-blue-400/30 group-hover:to-purple-400/30' 
                      : 'bg-gradient-to-br from-blue-100 to-purple-100 group-hover:from-blue-200 group-hover:to-purple-200'
                  }`}>
                    <div className={`transition-colors duration-300 ${
                      isDark ? 'text-blue-300 group-hover:text-blue-200' : 'text-blue-600 group-hover:text-blue-700'
                    }`}>
                      {element.icon}
                    </div>
                  </div>
                  
                  {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
                  <div className="space-y-1">
                    <div className={`font-semibold text-sm transition-colors duration-300 ${
                      isDark ? 'text-gray-100 group-hover:text-white' : 'text-gray-800 group-hover:text-gray-900'
                    }`}>
                      {element.name}
                    </div>
                    <div className={`text-xs leading-relaxed transition-colors duration-300 ${
                      isDark ? 'text-gray-400 group-hover:text-gray-300' : 'text-gray-500 group-hover:text-gray-600'
                    }`}>
                      {element.description}
                    </div>
                  </div>
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–∞ */}
                  <div className={`absolute top-3 right-3 w-2 h-2 rounded-full transition-all duration-300 ${
                    element.category === 'basic' ? (isDark ? 'bg-green-400' : 'bg-green-500') :
                    element.category === 'layout' ? (isDark ? 'bg-blue-400' : 'bg-blue-500') :
                    element.category === 'media' ? (isDark ? 'bg-purple-400' : 'bg-purple-500') :
                    element.category === 'forms' ? (isDark ? 'bg-orange-400' : 'bg-orange-500') :
                    element.category === 'navigation' ? (isDark ? 'bg-pink-400' : 'bg-pink-500') :
                    (isDark ? 'bg-gray-400' : 'bg-gray-500')
                  }`} />
                  
                  {/* Hover —ç—Ñ—Ñ–µ–∫—Ç */}
                  <div className={`absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 ${
                    isDark 
                      ? 'bg-gradient-to-r from-blue-500/5 to-purple-500/5' 
                      : 'bg-gradient-to-r from-blue-500/10 to-purple-500/10'
                  }`} />
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>
      )}
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
const BuilderPage: React.FC = () => {
  const navigate = useNavigate();
  const { isDark, toggleTheme } = useTheme();
  const { user } = useAuth();
  
  // –ü–æ–ª—É—á–∞–µ–º projectId –∏ sessionId –∏–∑ URL –Ω–∞–ø—Ä—è–º—É—é
  const pathParts = window.location.pathname.split('/');
  const projectId = pathParts[2]; // /builder/{projectId}/{sessionId}
  const sessionId = pathParts[3]; // /builder/{projectId}/{sessionId}
  
  console.log('üé® BuilderPage –∑–∞–≥—Ä—É–∂–µ–Ω');
  console.log('üÜî SessionId –∏–∑ URL:', sessionId);
  console.log('üìÅ ProjectId:', projectId);
  console.log('üåê –¢–µ–∫—É—â–∏–π URL:', window.location.pathname);
  console.log('üìä URL parts:', pathParts);
  
  const [elements, setElements] = useState<PageElement[]>([
    {
      id: 'header-1',
      type: 'header',
      category: 'basic',
      name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      description: '–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
      icon: 'üìù',
      content: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      x: 0,
      y: 0,
      width: 200,
      height: 40,
      zIndex: 1,
      opacity: 1,
      locked: false,
      visible: true,
      props: {},
      styles: {}
    },
    {
      id: 'text-1',
      type: 'text',
      category: 'basic',
      name: '–¢–µ–∫—Å—Ç',
      description: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
      icon: 'üìÑ',
      content: '–¢–µ–∫—Å—Ç',
      x: 0,
      y: 50,
      width: 200,
      height: 80,
      zIndex: 1,
      opacity: 1,
      locked: false,
      visible: true,
      props: {},
      styles: {}
    }
  ]);
  
  const [selectedElementId, setSelectedElementId] = useState<string | null>('text-1');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ–Ω—é - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
  const [leftMenuVisible, setLeftMenuVisible] = useState(false);
  const [rightMenuVisible, setRightMenuVisible] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const selectedElement = elements.find(el => el.id === selectedElementId) || null;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π layout –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const loadSavedLayout = async () => {
      if (!sessionId) return;
      
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π layout –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
        const savedLayout = await apiClient.loadLayout(sessionId);
        if (savedLayout && savedLayout.elements) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω layout –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', savedLayout);
          setElements(savedLayout.elements);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è Layout –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', error.message);
        // Fallback –∫ localStorage
        const storedLayout = localStorage.getItem(`layout_${sessionId}`);
        if (storedLayout) {
          try {
            const layoutData = JSON.parse(storedLayout);
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω layout –∏–∑ localStorage:', layoutData);
            setElements(layoutData.elements);
          } catch (parseError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', parseError);
          }
        }
      }
    };
    
    loadSavedLayout();
  }, [sessionId]);

  useEffect(() => {
    const loadPageData = async () => {
    if (!sessionId) return;

      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö Mod3
        const storedMod3Data = localStorage.getItem(`mod3_layout_${sessionId}`);
        if (storedMod3Data) {
          try {
            const mod3Data: Mod3LayoutResponse = JSON.parse(storedMod3Data);
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Mod3 –∏–∑ localStorage:', mod3Data);
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ Mod3
            const generatedElements = createElementsFromMod3(mod3Data);
            console.log('üé® –°–æ–∑–¥–∞–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:', generatedElements);
            
            setElements(generatedElements);
            return;
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö Mod3 –∏–∑ localStorage:', error);
          }
        }

        // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Mod3
        try {
          const mod3Response = await fetch(`http://localhost:9001/v1/layout/${sessionId}`);
          if (mod3Response.ok) {
            const mod3Data: Mod3LayoutResponse = await mod3Response.json();
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mod3:', mod3Data);
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ Mod3
            const generatedElements = createElementsFromMod3(mod3Data);
            console.log('üé® –°–æ–∑–¥–∞–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞:', generatedElements);
            
            setElements(generatedElements);
            return;
          }
        } catch (mod3Error) {
          console.log('‚ö†Ô∏è Mod3 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫');
        }
        
        // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –≤–µ–±-API
        const response = await apiClient.get(`/web/v1/session/${sessionId}/layout`);
        if (response.data && response.data.sections) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-API:', response.data);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —ç–ª–µ–º–µ–Ω—Ç—ã
          const convertedElements = convertLayoutToElements(response.data);
          setElements(convertedElements);
        } else {
          console.log('üìù –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    loadPageData();
  }, [sessionId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ layout –≤ —ç–ª–µ–º–µ–Ω—Ç—ã (fallback)
  const convertLayoutToElements = (layout: any): PageElement[] => {
    const elements: PageElement[] = [];
    
    if (layout.sections) {
      Object.entries(layout.sections).forEach(([sectionName, sectionData]: [string, any]) => {
        if (Array.isArray(sectionData)) {
          sectionData.forEach((block: any, index: number) => {
            const element: PageElement = {
              id: `${sectionName}-${index}-${Date.now()}`,
              type: block.component || 'text',
              category: 'basic',
              name: block.component || '–≠–ª–µ–º–µ–Ω—Ç',
              description: '',
              icon: 'üìÑ',
              content: block.props?.text || block.props?.content || '–ö–æ–Ω—Ç–µ–Ω—Ç',
              x: index * 50,
              y: sectionName === 'hero' ? 0 : sectionName === 'main' ? 200 : 400,
              width: 200,
              height: 100,
              zIndex: 1,
              opacity: 1,
              locked: false,
              visible: true,
              props: block.props || {},
              styles: {}
            };
            elements.push(element);
          });
        }
      });
    }
    
    return elements;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleElementSelect = (elementId: string) => {
    setSelectedElementId(elementId);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å debounce
  const debouncedSave = useCallback(
    debounce(async (elementsToSave: PageElement[]) => {
      if (!sessionId || elementsToSave.length === 0) return;
      
      try {
        const layoutData = {
          sessionId,
          elements: elementsToSave,
          timestamp: new Date().toISOString()
        };
        
        await apiClient.saveLayout(sessionId, layoutData);
        console.log('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      }
    }, 2000), // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    [sessionId]
  );

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  useEffect(() => {
    if (elements.length > 0) {
      debouncedSave(elements);
    }
  }, [elements, debouncedSave]);

  const handleElementUpdate = (elementId: string, updates: Partial<PageElement>) => {
    setElements(prev => prev.map(el => 
      el.id === elementId ? { ...el, ...updates } : el
    ));
  };

  const handleElementDelete = (elementId: string) => {
    setElements(prev => prev.filter(el => el.id !== elementId));
    if (selectedElementId === elementId) {
      setSelectedElementId(null);
    }
  };

  const handleElementDuplicate = (elementId: string) => {
    const elementToDuplicate = elements.find(el => el.id === elementId);
    if (elementToDuplicate) {
      const duplicatedElement = {
        ...elementToDuplicate,
        id: `${elementToDuplicate.type}-${Date.now()}`,
        x: elementToDuplicate.x + 20, // –°–º–µ—â–∞–µ–º –Ω–∞ 20px –≤–ø—Ä–∞–≤–æ
        y: elementToDuplicate.y + 20, // –°–º–µ—â–∞–µ–º –Ω–∞ 20px –≤–Ω–∏–∑
        name: `${elementToDuplicate.name} (–∫–æ–ø–∏—è)`
      };
      setElements(prev => [...prev, duplicatedElement]);
      setSelectedElementId(duplicatedElement.id);
    }
  };

  const handleToggleVisibility = (elementId: string) => {
    handleElementUpdate(elementId, { visible: !elements.find(el => el.id === elementId)?.visible });
  };

  const handleToggleLock = (elementId: string) => {
    handleElementUpdate(elementId, { locked: !elements.find(el => el.id === elementId)?.locked });
  };

  const handleAddElement = (element: VisualElement) => {
    const newElement = {
      ...element,
      id: `${element.type}-${Date.now()}`,
      x: 0,
      y: elements.length * 100
    };
    setElements(prev => [...prev, newElement]);
    setSelectedElementId(newElement.id);
  };

  const handleAddTemplate = (template: ElementTemplate) => {
    const newElements = template.elements.map((element, index) => ({
      ...element,
      id: `${element.type}-${Date.now()}-${index}`,
      x: 0,
      y: elements.length * 100 + index * 50
    }));
    setElements(prev => [...prev, ...newElements]);
    if (newElements.length > 0) {
      setSelectedElementId(newElements[0].id);
    }
  };

  const handleSaveLayout = async () => {
    setIsSaving(true);
    try {
      const layoutData = {
        sessionId,
        elements: elements,
        timestamp: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
      await apiClient.saveLayout(sessionId, layoutData);
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      localStorage.setItem(`layout_${sessionId}`, JSON.stringify(layoutData));
      
      console.log('‚úÖ Layout —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', sessionId);
      alert('–ú–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è layout:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞–∫–µ—Ç–∞: ' + error.message);
    } finally {
      setIsSaving(false);
    }
  };

  const handleExportHTML = () => {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
      const htmlContent = `<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - ${sessionId}</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      line-height: 1.6;
    }
    .page-container {
      width: 1200px;
      margin: 0 auto;
      position: relative;
      min-height: 100vh;
    }
    .element {
      position: absolute;
    }
  </style>
</head>
<body>
  <div class="page-container">
${elements.map(element => `    <div class="element" style="left: ${element.x}px; top: ${element.y}px; width: ${element.width}px; height: ${element.height}px; opacity: ${element.opacity}; z-index: ${element.zIndex}; display: ${element.visible ? 'block' : 'none'};">
      <div>${element.content || element.name}</div>
    </div>`).join('\n')}
  </div>
</body>
</html>`;

      // –°–æ–∑–¥–∞–µ–º Blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `page_${sessionId}_${Date.now()}.html`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      console.log('‚úÖ HTML —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      alert('HTML —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ HTML:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ HTML');
    }
  };

  const handleExportPNG = async () => {
    try {
      // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas');
      }

      // –†–∞–∑–º–µ—Ä—ã canvas (1200x800 –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞–∫–µ—Ç–∞)
      const canvasWidth = 1200;
      const canvasHeight = 800;
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;

      // –ë–µ–ª—ã–π —Ñ–æ–Ω
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, canvasWidth, canvasHeight);

      // –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
      elements.forEach(element => {
        if (!element.visible) return;

        // –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã
        const x = element.x;
        const y = element.y;
        const width = element.width;
        const height = element.height;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª—è
        ctx.globalAlpha = element.opacity;
        ctx.fillStyle = '#f8f9fa';
        ctx.strokeStyle = '#e5e7eb';
        ctx.lineWidth = 1;

        // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
        ctx.fillRect(x, y, width, height);
        ctx.strokeRect(x, y, width, height);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        if (element.content || element.name) {
          ctx.fillStyle = '#374151';
          ctx.font = '14px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
          ctx.textAlign = 'left';
          ctx.textBaseline = 'top';
          
          const text = element.content || element.name || element.type;
          const maxWidth = width - 16; // –û—Ç—Å—Ç—É–ø—ã
          const maxHeight = height - 16;
          
          // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
          let displayText = text;
          if (ctx.measureText(text).width > maxWidth) {
            displayText = text.substring(0, Math.floor(maxWidth / 8)) + '...';
          }
          
          ctx.fillText(displayText, x + 8, y + 8);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —É–≥–ª—É
        ctx.fillStyle = '#6b7280';
        ctx.font = '10px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
        ctx.fillText(element.type, x + 4, y + height - 12);
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ PNG –∏ —Å–∫–∞—á–∏–≤–∞–µ–º
      canvas.toBlob((blob) => {
        if (!blob) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        }

        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `layout_${sessionId}_${Date.now()}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 'image/png', 0.95);

      console.log('‚úÖ PNG —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω');
      alert('PNG —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PNG:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ PNG: ' + error.message);
    }
  };

    return (
    <div className={`h-screen flex flex-col ${isDark ? 'bg-gray-900' : 'bg-gray-50'}`}>
      {/* –û–±—â–∞—è —à–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è */}
      <div className="sticky top-0 z-60">
        <SharedHeader
          account={{ name: user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', email: user?.email || 'user@example.com' }}
          isDark={isDark}
          onThemeToggle={toggleTheme}
          showBackButton={false}
        />
      </div>

      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ —à–∞–ø–∫–æ–π */}
      <div className={`border-b flex-shrink-0 sticky top-0 z-50 ${isDark ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
        <div className="max-w-full mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ */}
            <div className="flex items-center space-x-4">
              <Button 
                size="sm"
                variant="ghost"
                onClick={() => {
                  navigate(`/projects/${projectId}`);
                  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ history API
                  window.history.pushState({}, "", `/projects/${projectId}`);
                  window.dispatchEvent(new PopStateEvent("popstate"));
                }}
                className={`h-8 w-8 p-0 ${isDark ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'}`}
                title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É"
              >
                <ArrowLeft className="w-4 h-4" />
              </Button>
              <div>
                <h1 className={`text-xl font-bold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                  –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
                </h1>
                <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                  –°–µ—Å—Å–∏—è: {sessionId}
                </p>
              </div>
            </div>
            
            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className="flex items-center space-x-2">
              <Button
                size="sm"
                onClick={handleSaveLayout}
                disabled={isSaving}
                className={`${isDark ? 'bg-green-600 hover:bg-green-700 text-white' : 'bg-green-500 hover:bg-green-600 text-white'} ${isSaving ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                <Save className="w-4 h-4 mr-1" />
                {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
              </Button>
              
              <Button 
                size="sm" 
                variant="outline" 
                onClick={handleExportHTML}
                className={isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}
              >
                <Download className="w-4 h-4 mr-1" />
                –≠–∫—Å–ø–æ—Ä—Ç HTML
              </Button>
              
              <Button 
                size="sm" 
                variant="outline" 
                onClick={handleExportPNG}
                className={isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : ''}
              >
                <Download className="w-4 h-4 mr-1" />
                –≠–∫—Å–ø–æ—Ä—Ç PNG
              </Button>
            </div>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é */}
            <div className="flex items-center space-x-2">
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => {
                  setLeftMenuVisible(!leftMenuVisible);
                  setRightMenuVisible(!rightMenuVisible);
                }}
                className={`h-8 w-8 p-0 ${isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-600 hover:bg-gray-50'}`}
                title={leftMenuVisible && rightMenuVisible ? '–°–∫—Ä—ã—Ç—å –≤—Å–µ –º–µ–Ω—é' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–µ–Ω—é'}
              >
                <AlignCenter className="w-4 h-4" />
              </Button>
              
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => setLeftMenuVisible(!leftMenuVisible)}
                className={`h-8 w-8 p-0 ${isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-600 hover:bg-gray-50'}`}
                title={leftMenuVisible ? '–°–∫—Ä—ã—Ç—å –ª–µ–≤–æ–µ –º–µ–Ω—é' : '–ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–≤–æ–µ –º–µ–Ω—é'}
              >
                <AlignLeft className="w-4 h-4" />
              </Button>
              
              <Button 
                size="sm" 
                variant="outline" 
                onClick={() => setRightMenuVisible(!rightMenuVisible)}
                className={`h-8 w-8 p-0 ${isDark ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-600 hover:bg-gray-50'}`}
                title={rightMenuVisible ? '–°–∫—Ä—ã—Ç—å –ø—Ä–∞–≤–æ–µ –º–µ–Ω—é' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–æ–µ –º–µ–Ω—é'}
              >
                <AlignRight className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ */}
      <div className="flex flex-1 overflow-hidden">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –≤—ã—Å–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∞ */}
        {leftMenuVisible && (
          <div className={`w-72 border-r flex-shrink-0 transition-all duration-300 sticky left-0 top-0 z-30 h-[100vh] ${isDark ? 'bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700' : 'bg-gradient-to-b from-white to-gray-50 border-gray-200'} shadow-lg`}>
            <div className="h-full overflow-y-auto">
              <div className="p-4">
                <div className="mb-4">
                  <h2 className={`text-lg font-semibold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                  </h2>
                  <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ø–æ–ª–æ—Ç–Ω–æ
                  </p>
                </div>
                
                <Tabs defaultValue="elements" className="w-full">
                  <TabsList className={`grid w-full grid-cols-2 mb-4 p-1 rounded-xl ${isDark ? 'bg-gradient-to-r from-gray-800 to-gray-900 border border-gray-600 shadow-lg' : 'bg-gradient-to-r from-gray-100 to-gray-200 border border-gray-300 shadow-lg'} backdrop-blur-sm`}>
                    <TabsTrigger 
                      value="elements" 
                      className={`text-sm font-semibold rounded-lg transition-all duration-300 hover:scale-105 ${
                        isDark 
                          ? 'data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg data-[state=active]:shadow-blue-500/25 hover:bg-gray-700/50 text-gray-300' 
                          : 'data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white data-[state=active]:shadow-lg data-[state=active]:shadow-blue-400/25 hover:bg-gray-200/50 text-gray-600'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        <div className={`w-4 h-4 rounded-md flex items-center justify-center ${
                          isDark ? 'bg-blue-500/20' : 'bg-blue-100'
                        }`}>
                          <Palette className={`w-3 h-3 ${isDark ? 'text-blue-400' : 'text-blue-600'}`} />
                        </div>
                        –≠–ª–µ–º–µ–Ω—Ç—ã
                      </div>
                    </TabsTrigger>
                    <TabsTrigger 
                      value="layers" 
                      className={`text-sm font-semibold rounded-lg transition-all duration-300 hover:scale-105 ${
                        isDark 
                          ? 'data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white data-[state=active]:shadow-lg data-[state=active]:shadow-blue-500/25 hover:bg-gray-700/50 text-gray-300' 
                          : 'data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-purple-500 data-[state=active]:text-white data-[state=active]:shadow-lg data-[state=active]:shadow-blue-400/25 hover:bg-gray-200/50 text-gray-600'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        <div className={`w-4 h-4 rounded-md flex items-center justify-center ${
                          isDark ? 'bg-purple-500/20' : 'bg-purple-100'
                        }`}>
                          <Layers className={`w-3 h-3 ${isDark ? 'text-purple-400' : 'text-purple-600'}`} />
                        </div>
                        –°–ª–æ–∏
                      </div>
                    </TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="elements" className="mt-3">
                    <ElementPalette
                      onAddElement={handleAddElement}
                      onAddTemplate={handleAddTemplate}
                    />
                  </TabsContent>
                  
                  <TabsContent value="layers" className="mt-3">
                    <LayersPanel
                      elements={elements}
                      selectedElementId={selectedElementId}
                      onSelectElement={handleElementSelect}
                      onToggleVisibility={handleToggleVisibility}
                      onToggleLock={handleToggleLock}
                      onDeleteElement={handleElementDelete}
                    />
                  </TabsContent>
                </Tabs>
              </div>
            </div>
          </div>
        )}

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–∞–Ω–≤–∞—Å–∞ - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è */}
        <div className={`flex-1 relative overflow-auto ${isDark ? 'bg-gray-900' : 'bg-gray-100'}`}>
          <div 
            className={`relative ${isDark ? 'bg-gray-800' : 'bg-white'}`}
            style={{ 
              width: '1200px',
              minHeight: '1500px',
              margin: '20px auto'
            }}
          >
            {/* –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
            <div>
              {elements.map((element) => (
                <DraggableElement
                  key={element.id}
                  element={element}
                  isSelected={selectedElementId === element.id}
                  onSelect={handleElementSelect}
                  onUpdate={handleElementUpdate}
                  onDelete={handleElementDelete}
                />
              ))}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –≤—ã—Å–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∞ */}
        {rightMenuVisible && (
          <div className={`w-80 border-l flex-shrink-0 transition-all duration-300 sticky right-0 top-0 z-30 h-[100vh] ${isDark ? 'bg-gradient-to-b from-gray-800 to-gray-900 border-gray-700' : 'bg-gradient-to-b from-white to-gray-50 border-gray-200'} shadow-lg`}>
            <div className="h-full overflow-y-auto">
              <div className="p-4">
                <div className="mb-4">
                  <h2 className={`text-lg font-semibold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å–≤–æ–π—Å—Ç–≤
                  </h2>
                  <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>
                    –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                  </p>
                </div>
                <InspectorPanel
                  selectedElement={selectedElement}
                  onUpdateElement={handleElementUpdate}
                  onDuplicateElement={handleElementDuplicate}
                  onDeleteElement={handleElementDelete}
                />
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default BuilderPage;