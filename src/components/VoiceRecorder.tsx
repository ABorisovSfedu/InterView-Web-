import React, { useState, useRef, useEffect } from 'react';
import { MicrophoneIcon, StopIcon, PlayIcon } from '@heroicons/react/24/solid';
import { Button } from './ui/button';

interface VoiceRecorderProps {
  onRecordingComplete: (audioFile: File) => void;
  disabled?: boolean;
}

export const VoiceRecorder: React.FC<VoiceRecorderProps> = ({ 
  onRecordingComplete, 
  disabled = false 
}) => {
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [audioData, setAudioData] = useState<Blob | null>(null);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
  useEffect(() => {
    if (isRecording) {
      timerRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isRecording]);

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          sampleRate: 44100,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true
        } 
      });

      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });

      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { 
          type: 'audio/webm;codecs=opus' 
        });
        setAudioData(audioBlob);
        // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç –∏–∑ Blob –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
        const audioFile = new File([audioBlob], 'recording.webm', {
          type: 'audio/webm',
          lastModified: Date.now()
        });
        onRecordingComplete(audioFile);
        
        // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start(100); // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 100ms
      setIsRecording(true);
      setRecordingTime(0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleSubmit = () => {
    if (audioData) {
      // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç –∏–∑ Blob –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API
      const audioFile = new File([audioData], 'recording.webm', {
        type: 'audio/webm',
        lastModified: Date.now()
      });
      onRecordingComplete(audioFile);
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6">
      <h3 className="text-lg font-semibold text-white mb-4">
        üé§ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
      </h3>
      
      <div className="space-y-4">
        {/* –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ */}
        <div className="text-center">
          <div className={`text-3xl font-mono font-bold ${
            isRecording ? 'text-red-500' : 'text-gray-400'
          }`}>
            {formatTime(recordingTime)}
          </div>
          {isRecording && (
            <div className="flex items-center justify-center mt-2">
              <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse mr-2"></div>
              <span className="text-sm text-red-400">–ó–∞–ø–∏—Å—å...</span>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-center gap-4">
          {!isRecording ? (
            <Button
              onClick={startRecording}
              disabled={disabled}
              className="bg-red-600 hover:bg-red-700 px-6 py-3"
            >
              <MicrophoneIcon className="h-6 w-6 mr-2" />
              –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å
            </Button>
          ) : (
            <Button
              onClick={stopRecording}
              className="bg-gray-600 hover:bg-gray-700 px-6 py-3"
            >
              <StopIcon className="h-6 w-6 mr-2" />
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ */}
        <div className="text-sm text-gray-400 space-y-1">
          <p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" –¥–ª—è –∑–≤—É–∫–æ–∑–∞–ø–∏—Å–∏</p>
          <p>‚Ä¢ –°–Ω–∏–º–∏—Ç–µ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —á—Ç–æ –±—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—Å —á—ë—Ç–∫–æ</p>
          <p>‚Ä¢ –§–æ—Ä–º–∞—Ç: WebM (opus –∫–æ–¥–µ–∫)</p>
          {audioData && (
            <p className="text-green-400">
              ‚úÖ –ó–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞: {(audioData.size / 1024 / 1024).toFixed(2)} MB
            </p>
          )}
        </div>

        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ */}
        {audioData && (
          <div className="border-t border-gray-700 pt-4">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-300">
                –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
              </span>
              <div className="flex gap-2">
                <audio 
                  controls 
                  src={URL.createObjectURL(audioData)}
                  className="text-sm"
                >
                  –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
                </audio>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default VoiceRecorder;
