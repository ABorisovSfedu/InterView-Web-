import React, { useState, useRef, useEffect } from "react";
import { 
  ArrowLeft, 
  Upload, 
  Mic, 
  MicOff, 
  Play, 
  Square, 
  Trash2, 
  FileText,
  File,
  CheckCircle,
  AlertCircle,
  Clock,
  RotateCcw,
  Wifi,
  WifiOff,
  X,
  Send
} from "lucide-react";
import { Button } from "./ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import SharedHeader from "./SharedHeader";
import { useTheme } from "../contexts/ThemeContext";
import { useAuth } from "../contexts/AuthContext";
import apiClient from "../api/client";
import mod1Client, { WebSocketMessage, ChunkData, TranscribeResponse } from "../api/mod1Client";
import mod2Client, { LayoutResponse, EntitiesResponse } from "../api/mod2Client";
import mod3Client, { MapResponse, ComponentMatch } from "../api/mod3Client";
import PageBuilder from "./visual/PageBuilder";

type FileType = "pdf" | "docx";

type UploadedFile = {
  id: string;
  name: string;
  type: FileType;
  size: string;
  uploadedAt: string;
  status: "uploading" | "processing" | "completed" | "error";
};

type VoiceMessage = {
  id: string;
  sessionId: string;
  duration: number;
  recordedAt: string;
  status: "recording" | "processing" | "completed" | "error";
  url?: string;
  transcript?: string;
  chunks?: ChunkData[];
  finalResult?: TranscribeResponse;
  entities?: EntitiesResponse;
  layout?: LayoutResponse;
  mod3Mapping?: MapResponse;
};

const mockAccount = { name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", email: "ivan@example.com" };

function SessionPage() {
  const { isDark, toggleTheme } = useTheme();
  const { user } = useAuth();
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState([] as UploadedFile[]);
  const [voiceMessages, setVoiceMessages] = useState([] as VoiceMessage[]);
  const [isDragOver, setIsDragOver] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null as string | null);
  
  // Mod1 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isMod1Connected, setIsMod1Connected] = useState(false);
  const [mod1Status, setMod1Status] = useState('disconnected' as 'disconnected' | 'connecting' | 'connected' | 'error');
  const [currentSessionId, setCurrentSessionId] = useState('');
  
  // Mod2 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isMod2Connected, setIsMod2Connected] = useState(false);
  const [mod2Status, setMod2Status] = useState('disconnected' as 'disconnected' | 'connecting' | 'connected' | 'error');
  const [vocabData, setVocabData] = useState(null as any);
  const [showVocab, setShowVocab] = useState(false);
  const [textInput, setTextInput] = useState('');
  const [audioLevel, setAudioLevel] = useState(0);
  const [showTextForm, setShowTextForm] = useState(true);
  const [showVoiceForm, setShowVoiceForm] = useState(true);
  
  // Mod3 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [isMod3Connected, setIsMod3Connected] = useState(false);
  const [mod3Status, setMod3Status] = useState('disconnected' as 'disconnected' | 'connecting' | 'connected' | 'error');
  const [mod3VocabData, setMod3VocabData] = useState(null as any);
  const [showMod3Vocab, setShowMod3Vocab] = useState(false);
  
  // PageBuilder —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [showPageBuilder, setShowPageBuilder] = useState(false);
  const [currentPageLayout, setCurrentPageLayout] = useState(null as any);
  const [autoShowPageBuilder, setAutoShowPageBuilder] = useState(true);
  
  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const [currentStep, setCurrentStep] = useState('recording' as 'recording' | 'mod1' | 'mod2' | 'mod3' | 'complete');
  const [showSequentialResults, setShowSequentialResults] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º projectId –∏ sessionId –∏–∑ URL
  const pathParts = window.location.pathname.split('/');
  const projectId = pathParts[2]; // /projects/{projectId}/sessions/{sessionId}
  const sessionId = pathParts[4]; // /projects/{projectId}/sessions/{sessionId}
  
  console.log('üîç SessionPage URL parts:', pathParts);
  console.log('üìÅ ProjectId:', projectId);
  console.log('üÜî SessionId:', sessionId);
  
  const mediaRecorderRef = useRef(null as MediaRecorder | null);
  const recordingIntervalRef = useRef(null as NodeJS.Timeout | null);
  const audioChunksRef = useRef([] as Blob[]);
  const audioContextRef = useRef(null as AudioContext | null);
  const analyserRef = useRef(null as AnalyserNode | null);
  const animationFrameRef = useRef(null as number | null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mod1 –∏ Mod2 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  useEffect(() => {
    const initializeModules = async () => {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mod1
      try {
        setMod1Status('connecting');
        const isMod1Healthy = await mod1Client.healthCheck();
        
        if (isMod1Healthy) {
          setMod1Status('connected');
          setIsMod1Connected(true);
          console.log('‚úÖ Mod1 —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
          setMod1Status('error');
          setIsMod1Connected(false);
          console.warn('‚ö†Ô∏è Mod1 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.error('Failed to connect to Mod1:', error);
        setMod1Status('error');
        setIsMod1Connected(false);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mod2
      try {
        setMod2Status('connecting');
        const isMod2Healthy = await mod2Client.healthCheck();
        
        if (isMod2Healthy) {
          setMod2Status('connected');
          setIsMod2Connected(true);
          console.log('‚úÖ Mod2 —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
          setMod2Status('error');
          setIsMod2Connected(false);
          console.warn('‚ö†Ô∏è Mod2 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.error('Failed to connect to Mod2:', error);
        setMod2Status('error');
        setIsMod2Connected(false);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mod3
      try {
        setMod3Status('connecting');
        const isMod3Healthy = await mod3Client.healthCheck();
        
        if (isMod3Healthy) {
          setMod3Status('connected');
          setIsMod3Connected(true);
          console.log('‚úÖ Mod3 —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
          setMod3Status('error');
          setIsMod3Connected(false);
          console.warn('‚ö†Ô∏è Mod3 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      } catch (error) {
        console.error('Failed to connect to Mod3:', error);
        setMod3Status('error');
        setIsMod3Connected(false);
      }
    };

    initializeModules();
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ session ID
  const generateSessionId = (): string => {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Ç–µ—Ä–º–∏–Ω–æ–≤
  const loadVocab = async () => {
    if (!isMod2Connected) return;
    
    try {
      const vocab = await mod2Client.getVocab();
      setVocabData(vocab);
      setShowVocab(true);
      console.log('‚úÖ –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω:', vocab);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è —Ç–µ—Ä–º–∏–Ω–æ–≤ Mod3
  const loadMod3Vocab = async () => {
    if (!isMod3Connected) return;
    
    try {
      const vocab = await mod3Client.getVocab();
      setMod3VocabData(vocab);
      setShowMod3Vocab(true);
      console.log('‚úÖ –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ Mod3 –∑–∞–≥—Ä—É–∂–µ–Ω:', vocab);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è Mod3:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ Mod3');
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Mod1 WebSocket
  const handleMod1Message = async (message: any) => {
    console.log('üîç Received Mod1 message:', message);
    console.log('üîç Message type:', message.type);
    console.log('üîç Message data:', message.data);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (message.type === 'hello') {
      console.log('üëã Mod1 WebSocket hello received');
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (message.type === 'progress') {
      console.log('üìä Mod1 progress:', message.data);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing –µ—Å–ª–∏ –µ—â–µ –Ω–µ completed
      setVoiceMessages(prev => 
        prev.map(vm => 
          vm.sessionId === currentSessionId && vm.status !== 'completed'
            ? { ...vm, status: 'processing' }
            : vm
        )
      );
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤
    if (message.type === 'chunk' && message.data && 'session_id' in message.data) {
      const chunk = message.data as ChunkData;
      console.log('üìù Processing chunk:', chunk);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ Mod2 –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é)
      if (isMod2Connected) {
        try {
          console.log('üîÑ Sending chunk to Mod2...');
          // await mod2Client.ingestChunk(chunk); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
          console.log('‚ö†Ô∏è Mod2 ingest –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞–Ω–∫–∞ –≤ Mod2:', error);
          console.error('‚ùå Error details:', error);
        }
      } else {
        console.warn('‚ö†Ô∏è Mod2 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —á–∞–Ω–∫–∞');
      }
      
      setVoiceMessages(prev => 
        prev.map(vm => 
          vm.sessionId === chunk.session_id 
            ? { 
                ...vm, 
                chunks: [...(vm.chunks || []), chunk],
                transcript: (vm.transcript || '') + chunk.text + ' '
              }
            : vm
        )
      );
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    else if (message.type === 'final' && message.data && 'session_id' in message.data) {
      const finalResult = message.data as TranscribeResponse;
      console.log('‚úÖ Processing final result:', finalResult);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Mod2
      if (isMod2Connected) {
        try {
          console.log('üîÑ Sending final result to Mod2...');
          await mod2Client.ingestFull({
            session_id: finalResult.session_id,
            text_full: (finalResult as any).text_full || '',
            lang: 'ru-RU',
            duration_sec: (finalResult as any).duration_sec || 0,
            total_chunks: (finalResult as any).total_chunks || 0,
            chunks: (finalResult as any).chunks || []
          });
          console.log('‚úÖ Final result sent to Mod2');
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Mod2
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –ü–æ–ª—É—á–∞–µ–º layout –æ—Ç Mod2
          console.log('üîÑ Getting layout from Mod2...');
          const layout = await mod2Client.getSessionLayout(finalResult.session_id);
          console.log('‚úÖ Layout –ø–æ–ª—É—á–µ–Ω –æ—Ç Mod2:', layout);
          
          // –ü–æ–ª—É—á–∞–µ–º mapping –æ—Ç Mod3
          let mod3Mapping: MapResponse | null = null;
          if (isMod3Connected && layout && layout.layout) {
            try {
              console.log('üîÑ Getting mapping from Mod3...');
              // –ò–∑–≤–ª–µ–∫–∞–µ–º entities –∏ keyphrases –∏–∑ layout –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Mod3
              const entities: string[] = [];
              const keyphrases: string[] = [];
              
              // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
              Object.values(layout.layout.sections).forEach((section: any) => {
                if (Array.isArray(section)) {
                  section.forEach((comp: any) => {
                    if (typeof comp === 'object' && comp.component) {
                      const componentName = comp.component.replace('ui.', '').replace('ui-', '');
                      entities.push(componentName);
                    }
                  });
                }
              });
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
              if ((finalResult as any).text_full) {
                keyphrases.push((finalResult as any).text_full);
              }
              
              mod3Mapping = await mod3Client.mapEntities({
                session_id: finalResult.session_id,
                entities,
                keyphrases,
                template: layout.layout.template || 'hero-main-footer'
              });
              console.log('‚úÖ Mapping –ø–æ–ª—É—á–µ–Ω –æ—Ç Mod3:', mod3Mapping);
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              setShowSequentialResults(true);
              setCurrentStep('mod1');
              console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è mapping –æ—Ç Mod3:', error);
            }
          }
          
          setVoiceMessages(prev => 
            prev.map(vm => 
              vm.sessionId === finalResult.session_id 
                ? { 
                    ...vm, 
                    status: 'completed',
                    finalResult,
                    transcript: (finalResult as any).text_full,
                    layout,
                    mod3Mapping
                  }
                : vm
            )
          );
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Mod2:', error);
          console.error('‚ùå Error details:', error);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ layout
          setVoiceMessages(prev => 
            prev.map(vm => 
              vm.sessionId === finalResult.session_id 
                ? { 
                    ...vm, 
                    status: 'completed',
                    finalResult,
                    transcript: (finalResult as any).text_full
                  }
                : vm
            )
          );
        }
      } else {
        console.warn('‚ö†Ô∏è Mod2 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º Mod1');
        // Mod2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º Mod1
        setVoiceMessages(prev => 
          prev.map(vm => 
            vm.sessionId === finalResult.session_id 
              ? { 
                  ...vm, 
                  status: 'completed',
                  finalResult,
                  transcript: (finalResult as any).text_full
                }
              : vm
          )
        );
      }
    } 
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    else if (message.type === 'error') {
      console.error('‚ùå Mod1 error:', message.data);
      setError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: ${(message.data as any).error}`);
    } 
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    else {
      console.warn('‚ö†Ô∏è Unknown message type:', message.type, 'Data:', message.data);
    }
  };

  const handleFileUpload = async (files: FileList | null) => {
    if (!files) return;
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏ –∏–∑ URL
    const pathParts = window.location.pathname.split('/');
    const projectId = pathParts[2];
    const sessionId = pathParts[4];
    
    if (!projectId || !sessionId) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Å–µ—Å—Å–∏–∏');
      return;
    }
    
    setLoading(true);
    setError(null);
    
    try {
      for (const file of Array.from(files)) {
        const fileType = getFileType(file.name);
        const newFile: UploadedFile = {
          id: Date.now().toString() + Math.random(),
          name: file.name,
          type: fileType,
          size: formatFileSize(file.size),
          uploadedAt: new Date().toLocaleString(),
          status: "uploading"
        };
        
        setUploadedFiles(prev => [...prev, newFile]);
        
        try {
          await apiClient.uploadSessionFiles(Number(sessionId), [file]);
          
          setUploadedFiles(prev => 
            prev.map(f => 
              f.id === newFile.id 
                ? { ...f, status: "completed" as const }
                : f
            )
          );
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', err);
          setUploadedFiles(prev => 
            prev.map(f => 
              f.id === newFile.id 
                ? { ...f, status: "error" as const }
                : f
            )
          );
        }
      }
    } finally {
      setLoading(false);
    }
  };

  const getFileType = (filename: string): FileType => {
    const ext = filename.split('.').pop()?.toLowerCase();
    return ext === 'pdf' ? 'pdf' : 'docx';
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getFileIcon = (type: FileType) => {
    return <FileText className="w-5 h-5 text-blue-500" />;
  };

  const startRecording = async () => {
    console.log('üé§ Starting recording...');
    console.log('üîç Mod1 connected:', isMod1Connected);
    console.log('üîç Mod2 connected:', isMod2Connected);
    
    if (!isMod1Connected) {
      setError('Mod1 —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
      return;
    }

    try {
      console.log('üîÑ Getting user media...');
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType: 'audio/webm;codecs=opus'
      });
      mediaRecorderRef.current = mediaRecorder;
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
      try {
        audioContextRef.current = new AudioContext();
        const source = audioContextRef.current.createMediaStreamSource(stream);
        analyserRef.current = audioContextRef.current.createAnalyser();
        analyserRef.current.fftSize = 256;
        source.connect(analyserRef.current);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        const updateAudioLevel = () => {
          if (analyserRef.current) {
            const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);
            analyserRef.current.getByteFrequencyData(dataArray);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
            const average = dataArray.reduce((a, b) => a + b) / dataArray.length;
            setAudioLevel(average);
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞
            if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
              animationFrameRef.current = requestAnimationFrame(updateAudioLevel);
            }
          }
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ isRecording
        setTimeout(() => {
          if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
            updateAudioLevel();
          }
        }, 100);
      } catch (error) {
        console.warn('‚ö†Ô∏è Audio analysis setup failed:', error);
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π session ID –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
      const sessionId = generateSessionId();
      console.log('üÜî Generated session ID:', sessionId);
      setCurrentSessionId(sessionId);
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —á–∞–Ω–∫–∏
      audioChunksRef.current = [];
      
      mediaRecorder.ondataavailable = (event) => {
        console.log('üéµ Audio data available, size:', event.data.size, 'bytes');
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
          if (event.data.size < 100) {
            console.warn('‚ö†Ô∏è Very small audio chunk detected:', event.data.size, 'bytes - possible silence');
          }
          
          // –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ REST API
          console.log('üìä Audio chunk received, size:', event.data.size, 'bytes');
        } else {
          console.warn('‚ö†Ô∏è Empty audio chunk received');
        }
      };
      
      mediaRecorder.onstop = async () => {
        console.log('üõë Recording stopped, processing audio...');
        const blob = new Blob(audioChunksRef.current, { type: 'audio/webm' });
        const url = URL.createObjectURL(blob);
        
        console.log('üìä Final audio blob:', {
          size: blob.size,
          type: blob.type,
          chunks: audioChunksRef.current.length
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
        if (blob.size < 5000) {
          console.warn('‚ö†Ô∏è Very small audio file detected:', blob.size, 'bytes - possible silence or no audio');
          setError(`–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π (${blob.size} –±–∞–π—Ç). –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–∏—à–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ–ª—å—à–µ.`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        if (recordingTime < 2) {
          console.warn('‚ö†Ô∏è Very short recording detected:', recordingTime, 'seconds');
          setError(`–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è (${recordingTime} —Å–µ–∫—É–Ω–¥). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏–º—É–º 2-3 —Å–µ–∫—É–Ω–¥—ã.`);
        }
        
        const newVoiceMessage: VoiceMessage = {
          id: Date.now().toString(),
          sessionId,
          duration: recordingTime,
          recordedAt: new Date().toLocaleString(),
          status: "processing",
          url
        };
        
        setVoiceMessages(prev => [...prev, newVoiceMessage]);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–±–µ —Ñ–æ—Ä–º—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        setShowTextForm(false);
        setShowVoiceForm(false);
        
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        setShowSequentialResults(true);
        setCurrentStep('mod1');
        console.log('üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        try {
          console.log('üîÑ Sending audio file to Mod1 via REST API...');
          console.log('üìä Blob size:', blob.size, 'bytes, type:', blob.type);
          console.log('üÜî Session ID:', sessionId);
          console.log('üïê Recording time:', recordingTime, 'seconds');
          console.log('üìÖ Recorded at:', new Date().toLocaleString());
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º blob –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const file = blob as any;
            file.name = `recording_${sessionId}.webm`;
          console.log('‚úÖ Using blob as file for compatibility');
          
          console.log('üìÅ Created file:', file.name, 'size:', file.size);
          
          const result = await mod1Client.transcribeFile({
            session_id: sessionId,
            lang: 'ru-RU',
            emit_partial: true,
            audio_file: file
          });
          
          console.log('‚úÖ REST API transcription completed:', result);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
          if (!(result as any).text_full || (result as any).text_full.trim() === '') {
            console.warn('‚ö†Ô∏è Empty transcription result - possible silence or very short audio');
            setError('–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –¥–æ–ª—å—à–µ –∏ –≥—Ä–æ–º—á–µ.');
          }
          
          setVoiceMessages(prev => 
            prev.map(vm => 
              vm.sessionId === sessionId 
                ? { 
                    ...vm, 
                    status: "completed",
                    transcript: (result as any).text_full || '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—É—Å—Ç–∞—è',
                    finalResult: {
                      session_id: result.session_id,
                      text_full: (result as any).text_full,
                      lang: result.language,
                      duration_sec: recordingTime,
                      total_chunks: 1
                    }
                  }
                : vm
            )
          );
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ Mod2 —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Mod1
          setCurrentStep('mod2');
          console.log('üéØ Mod1 –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Mod2');
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Mod2 –∏ –ø–æ–ª—É—á–∞–µ–º layout
          if (isMod2Connected) {
            try {
              console.log('üîÑ Sending final result to Mod2...');
              await mod2Client.ingestFull({
                session_id: sessionId,
                text_full: (result as any).text_full,
                lang: result.language || 'ru-RU',
                duration_sec: recordingTime,
                total_chunks: 1,
                chunks: (result as any).chunks || []
              });
              console.log('‚úÖ Final result sent to Mod2');
              
              // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Mod2
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              console.log('üîÑ Getting entities from Mod2...');
              const entitiesResult = await mod2Client.getSessionEntities(sessionId);
              console.log('‚úÖ Entities –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç Mod2:', entitiesResult);
              
              // –ü–æ–ª—É—á–∞–µ–º mapping –æ—Ç Mod3
              let mod3Mapping: MapResponse | undefined = undefined;
              if (isMod3Connected && entitiesResult && entitiesResult.entities) {
                try {
                  console.log('üîÑ Generating layout in Mod3...');
                  mod3Mapping = await mod3Client.mapEntities({
                    session_id: sessionId,
                    entities: entitiesResult.entities,
                    keyphrases: entitiesResult.keyphrases || entitiesResult.entities,
                    template: 'hero-main-footer'
                  });
                  console.log('‚úÖ Layout —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ Mod3:', mod3Mapping);
                  
                  // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —à–∞–≥
                  console.log('üéØ Mod3 –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —à–∞–≥');
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è mapping –æ—Ç Mod3:', error);
                }
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Mod2 (—Å—É—â–Ω–æ—Å—Ç–∏)
              setVoiceMessages(prev => 
                prev.map(vm => 
                  vm.sessionId === sessionId 
                    ? { ...vm, entities: entitiesResult }
                    : vm
                )
              );
          
              // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ Mod3 —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –æ—Ç Mod2
              setCurrentStep('mod3');
              console.log('üéØ Mod2 –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Mod3');
          
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Mod3 (layout)
              if (mod3Mapping) {
            setVoiceMessages(prev => 
              prev.map(vm => 
                vm.sessionId === sessionId 
                      ? { ...vm, mod3Mapping }
                  : vm
              )
            );
                
                // –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —à–∞–≥
                console.log('üéØ Mod3 –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —à–∞–≥');
              }
              
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entities –æ—Ç Mod2:', error);
            }
          }
          
        } catch (error) {
          console.error('‚ùå Failed to transcribe audio via REST API:', error);
            setVoiceMessages(prev => 
              prev.map(vm => 
                vm.sessionId === sessionId 
                  ? { ...vm, status: "error" }
                  : vm
              )
            );
        }
      };
      
      // Mod1 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebSocket, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ REST API
      console.log('‚úÖ Recording started, will use REST API for transcription');
      
        mediaRecorder.start(1000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setIsRecording(true);
        setRecordingTime(0);
        
        recordingIntervalRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
        }, 1000);
      
    } catch (error) {
      console.error('Error starting recording:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω.');
    }
  };

  const stopRecording = () => {
    console.log('üõë Stop recording called');
    if (mediaRecorderRef.current && isRecording) {
      console.log('üîÑ Stopping media recorder...');
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (recordingIntervalRef.current) {
        clearInterval(recordingIntervalRef.current);
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      if (audioContextRef.current) {
          audioContextRef.current.close();
      }
      setAudioLevel(0);
      
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
      console.log('‚úÖ Recording stopped, resources cleaned up');
    } else {
      console.warn('‚ö†Ô∏è Cannot stop recording - no media recorder or not recording');
    }
  };

  const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleDragOver = (e: any) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: any) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: any) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFileUpload(e.dataTransfer.files);
  };

  const handleTextSubmit = async () => {
    if (!textInput.trim() || !isMod2Connected) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Mod2 –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return;
    }

    try {
      setError(null);
      
      // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏ –∏–∑ URL
      const pathParts = window.location.pathname.split('/');
      const projectId = pathParts[2];
      const sessionId = pathParts[4];
      
      if (!projectId || !sessionId) {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π URL —Å–µ—Å—Å–∏–∏');
        return;
      }

      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2:', textInput);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Mod2
      const chunkResult = await mod2Client.ingestChunk({
        session_id: sessionId,
        chunk_id: `text-chunk-${Date.now()}`,
        seq: 1,
        lang: 'ru-RU',
        text: textInput.trim(),
        overlap_prefix: ''
      });

      console.log('‚úÖ Mod2 –æ–±—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–∫—Å—Ç:', chunkResult);

      // –ü–æ–ª—É—á–∞–µ–º entities (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
      const entitiesResult = await mod2Client.getSessionEntities(sessionId);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã entities:', entitiesResult);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º layout –≤ Mod3 –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
      let mod3Mapping: MapResponse | undefined = undefined;
      if (isMod3Connected && entitiesResult && entitiesResult.entities) {
        try {
          mod3Mapping = await mod3Client.mapEntities({
            session_id: sessionId,
            entities: entitiesResult.entities,
            keyphrases: entitiesResult.keyphrases || entitiesResult.entities,
            template: 'hero-main-footer'
          });
          console.log('‚úÖ Layout —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ Mod3:', mod3Mapping);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ layout –≤ Mod3:', error);
        }
      }

      // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const textMessage: VoiceMessage = {
        id: Date.now().toString(),
        sessionId,
        duration: 0,
        recordedAt: new Date().toLocaleString(),
        status: "completed",
        transcript: textInput.trim(),
        finalResult: {
          session_id: sessionId,
          text_full: textInput.trim(),
          chunk_id: `text-chunk-${Date.now()}`,
          confidence: 1.0,
          language: 'ru-RU',
          status: 'ok',
          chunks: []
        },
        entities: entitiesResult,
        mod3Mapping: mod3Mapping
      };

      setVoiceMessages(prev => [...prev, textMessage]);
      setShowSequentialResults(true);
      setCurrentStep('mod1');
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –æ–±–µ —Ñ–æ—Ä–º—ã
      setTextInput('');
      setShowTextForm(false);
      setShowVoiceForm(false);
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: ${error.message}`);
    }
  };

  return (
    <div className={`relative min-h-screen overflow-hidden ${isDark ? 'bg-black text-white' : 'bg-gray-50 text-gray-900'}`}>
      {/* Animated Background */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none" aria-hidden>
        {[...Array(8)].map((_, i) => (
          <div
            key={i}
            className={`absolute w-2 h-2 rounded-full animate-float ${isDark ? 'bg-gradient-to-r from-cyan-400 to-purple-500' : 'bg-gradient-to-r from-blue-300 to-purple-300'}`}
            style={{
              left: `${(i * 45) % 100}%`,
              top: `${(i * 60) % 100}%`,
              animationDelay: `${(i % 4) * 0.5}s`,
              animationDuration: `${3 + (i % 3)}s`,
            }}
          />
        ))}
      </div>

      {/* Shared Header */}
      <SharedHeader 
        account={user ? { name: user.name, email: user.email } : mockAccount}
        isDark={isDark}
        onThemeToggle={toggleTheme}
        showBackButton={false}
      />

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        {error && (
          <div className={`mb-6 p-4 rounded-lg border ${
            isDark 
              ? 'bg-red-500/10 border-red-500/30 text-red-300' 
              : 'bg-red-50 border-red-200 text-red-600'
          }`}>
            <div className="flex items-center">
              <AlertCircle className="w-5 h-5 mr-2" />
              {error}
            </div>
          </div>
        )}

        
        <div className="mb-8">
          <div className="pt-6">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ URL
                const pathParts = window.location.pathname.split('/');
                const projectId = pathParts[2]; // /projects/{projectId}/sessions/{sessionId}
                window.history.pushState({}, "", `/projects/${projectId}`);
                window.dispatchEvent(new PopStateEvent("popstate"));
              }}
              className={`mb-4 ${isDark ? 'text-white border-white/30 bg-white/5 hover:bg-white hover:text-black hover:border-white' : 'text-gray-700 border-gray-300 hover:bg-gray-100'}`}
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º
            </Button>
          </div>
          <div className="flex items-center justify-between mb-4">
            <div>
          <h1 className={`text-3xl font-bold mb-2 ${isDark ? 'text-white' : 'text-gray-900'}`}>
            –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
          </h1>
          <p className={`text-lg ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
            –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          </p>
        </div>
            
          </div>
        </div>

        {/* Vocab Display */}
        {showVocab && vocabData && (
          <div className={`mb-6 p-4 rounded-lg border ${
            isDark ? 'bg-blue-500/10 border-blue-500/30' : 'bg-blue-50 border-blue-200'
          }`}>
            <div className="flex items-center justify-between mb-3">
              <h3 className={`text-lg font-semibold ${isDark ? 'text-blue-300' : 'text-blue-700'}`}>
                üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ Mod2
              </h3>
              <Button
                onClick={() => setShowVocab(false)}
                size="sm"
                variant="outline"
                className="text-xs"
              >
                ‚úï
              </Button>
            </div>
            <div className="space-y-2">
              <p className={`text-sm ${isDark ? 'text-blue-200' : 'text-blue-600'}`}>
                <strong>–í–µ—Ä—Å–∏—è:</strong> {vocabData.vocab_version}
              </p>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                {vocabData.terms.map((term: any, index: number) => (
                  <div key={index} className={`p-3 rounded border ${
                    isDark ? 'bg-white/5 border-white/10' : 'bg-white border-gray-200'
                  }`}>
                    <p className={`font-medium text-sm ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      {term.lemma}
                    </p>
                    <p className={`text-xs mt-1 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      <strong>–≠–ª–µ–º–µ–Ω—Ç:</strong> {term.element}
                    </p>
                    {term.aliases && term.aliases.length > 0 && (
                      <p className={`text-xs mt-1 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                        <strong>–°–∏–Ω–æ–Ω–∏–º—ã:</strong> {term.aliases.join(', ')}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Mod3 Vocab Display */}
        {showMod3Vocab && mod3VocabData && (
          <div className={`mb-6 p-4 rounded-lg border ${
            isDark ? 'bg-orange-500/10 border-orange-500/30' : 'bg-orange-50 border-orange-200'
          }`}>
            <div className="flex items-center justify-between mb-3">
              <h3 className={`text-lg font-semibold ${isDark ? 'text-orange-300' : 'text-orange-700'}`}>
                üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ—Ä–º–∏–Ω–æ–≤ Mod3
              </h3>
              <Button
                onClick={() => setShowMod3Vocab(false)}
                size="sm"
                variant="outline"
                className="text-xs"
              >
                ‚úï
              </Button>
            </div>
            <div className="space-y-2">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                {mod3VocabData.terms.map((term: any, index: number) => (
                  <div key={index} className={`p-3 rounded border ${
                    isDark ? 'bg-white/5 border-white/10' : 'bg-white border-gray-200'
                  }`}>
                    <p className={`font-medium text-sm ${isDark ? 'text-white' : 'text-gray-900'}`}>
                      {term.term}
                    </p>
                    <p className={`text-xs mt-1 ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {term.category}
                    </p>
                    {term.synonyms && term.synonyms.length > 0 && (
                      <p className={`text-xs mt-1 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                        <strong>–°–∏–Ω–æ–Ω–∏–º—ã:</strong> {term.synonyms.join(', ')}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Real-time Recording Status */}
        {isRecording && (
          <Card className={`mb-6 ${isDark ? 'bg-red-500/10 border-red-500/30' : 'bg-red-50 border-red-200'}`}>
            <CardContent className="pt-6">
              <div className="flex items-center justify-center space-x-4">
                <div className="flex items-center space-x-2">
                  <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
                  <Mic className="w-5 h-5 text-red-500" />
                  <span className={`font-medium ${isDark ? 'text-red-300' : 'text-red-700'}`}>
                    –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...
                  </span>
                </div>
                <div className={`text-2xl font-mono ${isDark ? 'text-red-300' : 'text-red-700'}`}>
                  {formatTime(recordingTime)}
                </div>
                <div className={`text-sm ${isDark ? 'text-red-400' : 'text-red-600'}`}>
                  Session: {currentSessionId}
                </div>
              </div>
            </CardContent>
          </Card>
        )}




        {/* –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
        {showSequentialResults && voiceMessages.length > 0 && (
          <Card className={`mb-8 ${isDark ? 'bg-white/5 border-white/10' : 'bg-white border-gray-200'}`}>
            <CardHeader>
              <div className="flex items-center justify-between">
                        <div>
              <CardTitle className={`text-xl ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    üéØ –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
              </CardTitle>
              <CardDescription className={isDark ? 'text-gray-300' : 'text-gray-600'}>
                    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
              </CardDescription>
                        </div>
                <div className="flex gap-2">
                  <Button
                    onClick={() => {
                      setShowTextForm(true);
                      setShowVoiceForm(true);
                      setVoiceMessages([]);
                      setShowSequentialResults(false);
                      setCurrentStep('recording');
                      setTextInput('');
                    }}
                                        variant="outline" 
                    size="sm"
                    className={`${isDark ? 'border-white/20 text-white hover:bg-white/10' : 'border-gray-300 text-gray-700 hover:bg-gray-50'}`}
                  >
                    <RotateCcw className="w-4 h-4 mr-2" />
                    –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                  </Button>
                                    </div>
                                  </div>
            </CardHeader>
            <CardContent>
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  {['mod1', 'mod2', 'mod3', 'complete'].map((step, index) => (
                    <div key={step} className="flex items-center">
                      <button
                        onClick={() => setCurrentStep(step as any)}
                        className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold transition-colors duration-200 ${
                        currentStep === step 
                            ? 'bg-blue-500 text-white hover:bg-blue-600' 
                          : ['mod1', 'mod2', 'mod3', 'complete'].indexOf(currentStep) > index
                            ? 'bg-green-500 text-white hover:bg-green-600'
                            : 'bg-gray-300 text-gray-600 hover:bg-gray-400'
                        }`}
                      >
                        {index + 1}
                      </button>
                      {index < 3 && (
                        <div className={`w-16 h-1 mx-2 ${
                          ['mod1', 'mod2', 'mod3', 'complete'].indexOf(currentStep) > index
                            ? 'bg-green-500'
                            : 'bg-gray-300'
                        }`} />
                      )}
                    </div>
                  ))}
                </div>
                <div className="flex justify-between text-sm text-gray-600">
                  <span>Mod1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</span>
                  <span>Mod2: NLP –∞–Ω–∞–ª–∏–∑</span>
                  <span>Mod3: Visual Mapping</span>
                  <span>–ì–æ—Ç–æ–≤–æ</span>
                </div>
              </div>

              {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ */}
              <div className="min-h-[400px]">
                {currentStep === 'mod1' && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                        <span className="text-white text-lg font-bold">1</span>
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold">–ú–æ–¥—É–ª—å 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏</h3>
                        <p className="text-sm text-gray-600">–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç</p>
                      </div>
                    </div>
                    
                    {voiceMessages.map((message) => (
                      <div key={message.id} className={`p-4 rounded-lg border ${
                        message.finalResult 
                          ? isDark ? 'bg-green-500/10 border-green-500/30' : 'bg-green-50 border-green-200'
                          : message.status === 'processing'
                          ? isDark ? 'bg-blue-500/10 border-blue-500/30' : 'bg-blue-50 border-blue-200'
                          : isDark ? 'bg-gray-500/10 border-gray-500/30' : 'bg-gray-50 border-gray-200'
                      }`}>
                        <div className="space-y-3">
                          {message.finalResult ? (
                            <>
                          <div>
                            <h4 className="font-medium text-green-800">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:</h4>
                            <p className="text-gray-700 mt-1">{message.transcript}</p>
                          </div>
                              <div className="grid grid-cols-2 gap-4 text-sm">
                              <div>
                                  <span className="font-medium">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                                  <p>{message.finalResult.duration_sec} —Å–µ–∫</p>
                              </div>
                          <div>
                                  <span className="font-medium">–ß–∞–Ω–∫–æ–≤:</span>
                                  <p>{message.finalResult.total_chunks}</p>
                          </div>
                        </div>
                            </>
                          ) : message.status === 'processing' ? (
                          <div className="flex items-center gap-3">
                              <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                            <div>
                                <h4 className="font-medium text-blue-800">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...</h4>
                                <p className="text-sm text-gray-600">–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Mod1 –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏</p>
                        </div>
                      </div>
                    ) : (
                        <div className="flex items-center gap-3">
                              <div className="w-6 h-6 bg-gray-400 rounded-full"></div>
                              <div>
                                <h4 className="font-medium text-gray-800">–û–∂–∏–¥–∞–Ω–∏–µ...</h4>
                                <p className="text-sm text-gray-600">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ</p>
                        </div>
                      </div>
                    )}
                        </div>
                      </div>
                    ))}
                    
                    <div className="flex justify-end">
                      <Button 
                        onClick={() => setCurrentStep('mod2')}
                        className="bg-green-500 hover:bg-green-600 text-white"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ Mod2 ‚Üí
                      </Button>
                    </div>
                  </div>
                )}

                {currentStep === 'mod2' && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-10 h-10 bg-purple-500 rounded-full flex items-center justify-center">
                        <span className="text-white text-lg font-bold">2</span>
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold">–ú–æ–¥—É–ª—å 2: NLP –∞–Ω–∞–ª–∏–∑</h3>
                        <p className="text-sm text-gray-600">–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è layout</p>
                      </div>
                    </div>
                    
                    {voiceMessages.map((message) => (
                      <div key={message.id} className={`p-4 rounded-lg border ${
                        message.entities 
                          ? isDark ? 'bg-purple-500/10 border-purple-500/30' : 'bg-purple-50 border-purple-200'
                          : message.finalResult && !message.entities
                          ? isDark ? 'bg-blue-500/10 border-blue-500/30' : 'bg-blue-50 border-blue-200'
                          : isDark ? 'bg-gray-500/10 border-gray-500/30' : 'bg-gray-50 border-gray-200'
                      }`}>
                        <div className="space-y-3">
                          {message.entities ? (
                            <>
                          <div>
                                <h4 className={`font-semibold text-lg ${isDark ? 'text-purple-300' : 'text-purple-800'}`}>
                                  –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã:
                                </h4>
                                <div className="mt-3 space-y-2">
                                  {message.entities?.keyphrases?.map((phrase: string, index: number) => (
                                    <div key={index} className={`flex items-center gap-3 p-3 rounded-lg border ${
                                      isDark 
                                        ? 'bg-purple-500/10 border-purple-400/30 hover:bg-purple-500/20' 
                                        : 'bg-purple-50 border-purple-200 hover:bg-purple-100'
                                    } transition-colors duration-200`}>
                                      <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                                        isDark ? 'bg-purple-500/20 text-purple-300' : 'bg-purple-200 text-purple-700'
                                      }`}>
                                        {index + 1}
                          </div>
                                      <span className={`font-medium ${isDark ? 'text-purple-200' : 'text-purple-800'}`}>
                                        {phrase}
                                      </span>
                                </div>
                              ))}
                            </div>
                          </div>
                            </>
                          ) : message.finalResult && !message.entities ? (
                        <div className="flex items-center gap-3">
                              <div className="w-6 h-6 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                          <div>
                                <h4 className="font-medium text-blue-800">–û–±—Ä–∞–±–æ—Ç–∫–∞ NLP...</h4>
                                <p className="text-sm text-gray-600">–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Mod2 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞</p>
                        </div>
                      </div>
                    ) : (
                        <div className="flex items-center gap-3">
                              <div className="w-6 h-6 bg-gray-400 rounded-full"></div>
                              <div>
                                <h4 className="font-medium text-gray-800">–û–∂–∏–¥–∞–Ω–∏–µ...</h4>
                                <p className="text-sm text-gray-600">–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏</p>
                        </div>
                      </div>
                    )}
                        </div>
                      </div>
                    ))}
                    
                    <div className="flex justify-between">
                      <Button 
                        onClick={() => setCurrentStep('mod1')}
                        variant="outline"
                      >
                        ‚Üê –ù–∞–∑–∞–¥ –∫ Mod1
                      </Button>
                      <Button 
                        onClick={() => setCurrentStep('mod3')}
                        className="bg-purple-500 hover:bg-purple-600 text-white"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ Mod3 ‚Üí
                      </Button>
                    </div>
                  </div>
                )}

                {currentStep === 'mod3' && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-10 h-10 bg-orange-500 rounded-full flex items-center justify-center">
                        <span className="text-white text-lg font-bold">3</span>
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold">–ú–æ–¥—É–ª—å 3: Visual Mapping</h3>
                        <p className="text-sm text-gray-600">–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏</p>
                      </div>
                    </div>
                    
                    {voiceMessages.map((message) => (
                      <div key={message.id} className={`p-4 rounded-lg border ${
                        message.mod3Mapping 
                          ? isDark ? 'bg-orange-500/10 border-orange-500/30' : 'bg-orange-50 border-orange-200'
                          : message.entities && !message.mod3Mapping
                          ? isDark ? 'bg-blue-500/10 border-blue-500/30' : 'bg-blue-50 border-blue-200'
                          : isDark ? 'bg-gray-500/10 border-gray-500/30' : 'bg-gray-50 border-gray-200'
                      }`}>
                        <div className="space-y-3">
                          {message.mod3Mapping ? (
                            <>
                          <div>
                                <h4 className={`font-semibold text-lg ${isDark ? 'text-orange-300' : 'text-orange-800'}`}>
                                  –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:
                                </h4>
                                <div className="mt-3 space-y-2">
                              {message.mod3Mapping?.matches?.map((match: ComponentMatch, index: number) => (
                                    <div key={index} className={`flex items-center justify-between p-3 rounded-lg border ${
                                      isDark 
                                        ? 'bg-orange-500/10 border-orange-400/30 hover:bg-orange-500/20' 
                                        : 'bg-orange-50 border-orange-200 hover:bg-orange-100'
                                    } transition-colors duration-200`}>
                                      <div className="flex items-center gap-3">
                                        <div className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                                          isDark ? 'bg-orange-500/20 text-orange-300' : 'bg-orange-200 text-orange-700'
                                        }`}>
                                          {index + 1}
                                        </div>
                                        <span className={`font-medium ${isDark ? 'text-orange-200' : 'text-orange-800'}`}>
                                          {match.term}
                                        </span>
                                        <span className={`text-lg ${isDark ? 'text-orange-400' : 'text-orange-600'}`}>‚Üí</span>
                                        <span className={`font-mono text-sm ${isDark ? 'text-orange-300' : 'text-orange-700'}`}>
                                          {match.component}
                                        </span>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    <Badge 
                                      variant="outline"
                                      className={`text-xs ${
                                            match.match_type === 'exact' 
                                              ? isDark ? 'border-green-400 text-green-300' : 'border-green-500 text-green-600'
                                              : match.match_type === 'fuzzy' 
                                              ? isDark ? 'border-yellow-400 text-yellow-300' : 'border-yellow-500 text-yellow-600'
                                              : isDark ? 'border-gray-400 text-gray-300' : 'border-gray-500 text-gray-600'
                                      }`}
                                    >
                                      {match.match_type}
                                    </Badge>
                                        <span className={`text-xs ${isDark ? 'text-orange-300' : 'text-orange-600'}`}>
                                      {(match.confidence * 100).toFixed(0)}%
                                    </span>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                            </>
                          ) : message.entities && !message.mod3Mapping ? (
                        <div className="flex items-center gap-3">
                              <div className="w-6 h-6 border-2 border-orange-500 border-t-transparent rounded-full animate-spin"></div>
                          <div>
                                <h4 className={`font-medium ${isDark ? 'text-orange-300' : 'text-orange-800'}`}>–í–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥...</h4>
                                <p className={`text-sm ${isDark ? 'text-orange-400' : 'text-orange-600'}`}>–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Mod3 –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
                        </div>
                      </div>
                    ) : (
                        <div className="flex items-center gap-3">
                              <div className={`w-6 h-6 rounded-full ${isDark ? 'bg-gray-600' : 'bg-gray-400'}`}></div>
                              <div>
                                <h4 className={`font-medium ${isDark ? 'text-gray-300' : 'text-gray-800'}`}>–û–∂–∏–¥–∞–Ω–∏–µ...</h4>
                                <p className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-600'}`}>–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è NLP –∞–Ω–∞–ª–∏–∑–∞</p>
                        </div>
                      </div>
                    )}
                        </div>
                      </div>
                    ))}
                    
                    <div className="flex justify-between">
                      <Button 
                        onClick={() => setCurrentStep('mod2')}
                        variant="outline"
                      >
                        ‚Üê –ù–∞–∑–∞–¥ –∫ Mod2
                      </Button>
                      <Button 
                        onClick={() => setCurrentStep('complete')}
                        className="bg-orange-500 hover:bg-orange-600 text-white"
                      >
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å ‚Üí
                      </Button>
                    </div>
                  </div>
                )}

                {currentStep === 'complete' && (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
                        <CheckCircle className="w-6 h-6 text-white" />
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h3>
                        <p className="text-sm text-gray-600">–í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                      </div>
                    </div>
                    
                    <div className={`p-6 rounded-lg border ${
                      isDark ? 'bg-green-500/10 border-green-500/30' : 'bg-green-50 border-green-200'
                    }`}>
                      <div className="text-center space-y-4">
                        <div className="text-4xl">üéâ</div>
                        <h4 className="text-lg font-semibold text-green-800">–ì–æ—Ç–æ–≤–æ!</h4>
                        <p className="text-gray-700">
                          –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏. 
                          –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
                        </p>
                        <div className="flex justify-center gap-4">
                          <Button 
                            onClick={() => {
                              console.log('üé® –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü" –Ω–∞–∂–∞—Ç–∞');
                              console.log('üÜî SessionId –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:', sessionId);
                              
                              if (!sessionId) {
                                console.error('‚ùå SessionId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!');
                                alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–µ—Å—Å–∏–∏');
                                return;
                              }
                              
                              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Mod3 –≤ localStorage –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                              const currentMessage = voiceMessages.find(vm => vm.sessionId === sessionId);
                              if (currentMessage?.mod3Mapping) {
                                localStorage.setItem(`mod3_layout_${sessionId}`, JSON.stringify(currentMessage.mod3Mapping));
                                console.log('üíæ –î–∞–Ω–Ω—ã–µ Mod3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
                              }
                              
                              // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
                              const builderUrl = `/builder/${projectId}/${sessionId}`;
                              console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞:', builderUrl);
                              window.location.href = builderUrl;
                            }}
                            className="bg-green-500 hover:bg-green-600 text-white"
                          >
                            üé® –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü
                          </Button>
                          <Button 
                            onClick={() => {
                              setShowSequentialResults(false);
                              setCurrentStep('recording');
                            }}
                            variant="outline"
                          >
                            –ó–∞–∫—Ä—ã—Ç—å
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* PageBuilder Modal */}
        {showPageBuilder && (
          <div className="fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg w-full h-full max-w-7xl">
              <div className="flex items-center justify-between p-4 border-b">
                <div className="flex items-center space-x-4">
                  <h2 className="text-xl font-semibold">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü</h2>
                  <Badge variant="outline" className="bg-green-100 text-green-700">
                    üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
                  </Badge>
                </div>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowSequentialResults(!showSequentialResults)}
                  >
                    {showSequentialResults ? 'üéØ' : 'üìã'} –ü–æ—à–∞–≥–æ–≤—ã–π –ø–æ–∫–∞–∑
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowPageBuilder(false)}
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              <div className="h-full">
                <PageBuilder
                  mod3Data={voiceMessages.find(msg => msg.mod3Mapping)?.mod3Mapping}
                  onPageChange={setCurrentPageLayout}
                  onSave={(layout) => {
                    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', layout);
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                  }}
                  className="h-full"
                />
                        </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Text Input Section */}
          {showTextForm && (
          <Card className={`${isDark ? 'bg-white/5 border-white/10' : 'bg-white border-gray-200'}`}>
            <CardHeader>
              <CardTitle className={`text-xl ${isDark ? 'text-white' : 'text-gray-900'}`}>
                –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
              </CardTitle>
              <CardDescription className={isDark ? 'text-gray-300' : 'text-gray-600'}>
                –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Mod2
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-6">
                {/* –ë–æ–ª—å—à–æ–π –∫—Ä—É–≥–ª—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö */}
                <div className={`w-32 h-32 mx-auto rounded-full flex items-center justify-center ${
                  isMod2Connected
                    ? isDark
                      ? 'bg-white/10 border-2 border-white/20'
                      : 'bg-gray-100 border-2 border-gray-300'
                    : isDark
                    ? 'bg-red-500/20 border-2 border-red-500'
                    : 'bg-red-100 border-2 border-red-300'
                }`}>
                  <FileText className="w-8 h-8 text-purple-500" />
                </div>
                
                <div className="space-y-4">
                  {/* Textarea */}
                  <div className="max-w-md mx-auto">
                    <textarea
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Mod2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–¥–µ–ª–∞–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã')"
                      value={textInput}
                      onChange={(e) => setTextInput(e.target.value)}
                      className={`w-full p-3 border rounded-md ${
                        isDark ? 'bg-white/5 border-white/20 text-white placeholder-gray-400' : 
                        'bg-gray-50 border-gray-300 text-gray-900 placeholder-gray-500'
                      } min-h-[100px] resize-none`}
                      disabled={!isMod2Connected}
                    />
              </div>

                  {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
                  <div className={`text-sm p-3 rounded ${
                    isDark ? 'bg-purple-500/10 border border-purple-500/30 text-purple-300' : 
                    'bg-purple-50 border border-purple-200 text-purple-600'
                  }`}>
                    <div className="flex items-center gap-2 mb-1">
                      <FileText className="w-4 h-4" />
                      <span className="font-medium">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</span>
                        </div>
                    <ul className="text-xs space-y-1 ml-6">
                      <li>‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–∫—Å—Ç–æ–º</li>
                      <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫</li>
                      <li>‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏</li>
                      <li>‚Ä¢ Mod2 –∏–∑–≤–ª–µ—á–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã</li>
                    </ul>
                      </div>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                  <div className="flex justify-center">
                        <Button
                      onClick={handleTextSubmit}
                      disabled={!isMod2Connected || !textInput.trim()}
                      className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Send className="w-4 h-4 mr-2" />
                      {isMod2Connected ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Mod2' : 'Mod2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                        </Button>
                      </div>
                    </div>
                </div>
            </CardContent>
          </Card>
          )}

          {/* Voice Recording Section */}
          {showVoiceForm && (
          <Card className={`${isDark ? 'bg-white/5 border-white/10' : 'bg-white border-gray-200'}`}>
            <CardHeader>
              <CardTitle className={`text-xl ${isDark ? 'text-white' : 'text-gray-900'}`}>
                –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
              </CardTitle>
              <CardDescription className={isDark ? 'text-gray-300' : 'text-gray-600'}>
                –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center space-y-6">
                <div className={`w-32 h-32 mx-auto rounded-full flex items-center justify-center ${
                  isRecording
                    ? isDark
                      ? 'bg-red-500/20 border-2 border-red-500 animate-pulse'
                      : 'bg-red-100 border-2 border-red-300 animate-pulse'
                    : isDark
                    ? 'bg-white/10 border-2 border-white/20'
                    : 'bg-gray-100 border-2 border-gray-300'
                }`}>
                  {isRecording ? (
                    <MicOff className="w-8 h-8 text-red-500" />
                  ) : (
                    <Mic className="w-8 h-8 text-blue-500" />
                  )}
                </div>
                
                <div className="space-y-4">
                  <p className={`text-2xl font-mono ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    {formatTime(recordingTime)}
                  </p>
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏ */}
                  {isRecording && (
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <span className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                          –ì—Ä–æ–º–∫–æ—Å—Ç—å:
                        </span>
                        <div className="flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full transition-all duration-100 ${
                              audioLevel > 50 ? 'bg-green-500' : 
                              audioLevel > 20 ? 'bg-yellow-500' : 'bg-red-500'
                            }`}
                            style={{ width: `${Math.min(audioLevel * 2, 100)}%` }}
                          />
                        </div>
                        <span className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                          {Math.round(audioLevel)}
                        </span>
                      </div>
                      
                      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏ */}
                      {audioLevel < 20 && (
                        <div className={`text-xs p-2 rounded ${
                          isDark ? 'bg-red-500/10 border border-red-500/30 text-red-300' : 
                          'bg-red-50 border border-red-200 text-red-600'
                        }`}>
                          ‚ö†Ô∏è –ì–æ–≤–æ—Ä–∏—Ç–µ –≥—Ä–æ–º—á–µ! –ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—á—Ç–∏ –Ω–µ —Å–ª—ã—à–∏—Ç –≤–∞—Å.
                        </div>
                      )}
                      
                      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
                      <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                        üí° –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 3-5 —Å–µ–∫—É–Ω–¥.
                      </div>
                    </div>
                  )}
                  
                  {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é */}
                  {!isRecording && (
                    <div className={`text-sm p-3 rounded ${
                      isDark ? 'bg-blue-500/10 border border-blue-500/30 text-blue-300' : 
                      'bg-blue-50 border border-blue-200 text-blue-600'
                    }`}>
                      <div className="flex items-center gap-2 mb-1">
                        <Mic className="w-4 h-4" />
                        <span className="font-medium">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å–∏:</span>
                      </div>
                      <ul className="text-xs space-y-1 ml-6">
                        <li>‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω</li>
                        <li>‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –º–∏–Ω–∏–º—É–º 3-5 —Å–µ–∫—É–Ω–¥</li>
                        <li>‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏</li>
                        <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç</li>
                      </ul>
                    </div>
                  )}
                  
                  <div className="flex justify-center gap-4">
                    {!isRecording ? (
                      <Button
                        onClick={startRecording}
                        disabled={!isMod1Connected}
                        className="bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        <Mic className="w-4 h-4 mr-2" />
                        {isMod1Connected ? '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å' : 'Mod1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                      </Button>
                    ) : (
                      <Button
                        onClick={stopRecording}
                        className="bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white"
                      >
                        <Square className="w-4 h-4 mr-2" />
                        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                      </Button>
                    )}
                  </div>
                </div>
              </div>

              {voiceMessages.length > 0 && (
                <div className="mt-8 space-y-3">
                  <h3 className={`text-lg font-semibold ${isDark ? 'text-white' : 'text-gray-900'}`}>
                    –ó–∞–ø–∏—Å–∏
                  </h3>
                  {voiceMessages.map((message) => (
                    <div
                      key={message.id}
                      className={`p-4 rounded-lg border ${
                        isDark
                          ? 'bg-white/5 border-white/10 hover:border-white/20'
                          : 'bg-gray-50 border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Mic className="w-5 h-5 text-purple-500" />
                          <span className={`font-medium ${isDark ? 'text-white' : 'text-gray-900'}`}>
                            {formatTime(message.duration)}
                          </span>
                          <span className={`text-sm ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                            ‚Ä¢ {message.recordedAt}
                          </span>
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge
                            className={
                              message.status === 'completed'
                                ? isDark 
                                  ? 'bg-green-500/20 text-green-300 border-green-500/30'
                                  : 'bg-green-100 text-green-700 border-green-200'
                                : message.status === 'error'
                                ? isDark
                                  ? 'bg-red-500/20 text-red-300 border-red-500/30'
                                  : 'bg-red-100 text-red-700 border-red-200'
                                : isDark
                                  ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30'
                                  : 'bg-yellow-100 text-yellow-700 border-yellow-200'
                            }
                          >
                            {message.status === 'completed' && <CheckCircle className="w-3 h-3 mr-1" />}
                            {message.status === 'error' && <AlertCircle className="w-3 h-3 mr-1" />}
                            {message.status === 'recording' && <Mic className="w-3 h-3 mr-1" />}
                            {message.status === 'processing' && <RotateCcw className="w-3 h-3 mr-1 animate-spin" />}
                            {message.status === 'completed' ? '–ì–æ—Ç–æ–≤–æ' : 
                             message.status === 'error' ? '–û—à–∏–±–∫–∞' :
                             message.status === 'recording' ? '–ó–∞–ø–∏—Å—å' : '–û–±—Ä–∞–±–æ—Ç–∫–∞'}
                          </Badge>
                          <Button
                            size="sm"
                            variant="outline"
                            className={`${isDark ? 'border-white/30 text-white hover:bg-white/15' : 'border-gray-300 text-gray-700 hover:bg-gray-100'}`}
                          >
                            <Play className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className={`${isDark ? 'border-red-400/50 text-red-300 hover:bg-red-500/10' : 'border-red-300 text-red-600 hover:bg-red-50'}`}
                            onClick={() => setVoiceMessages(prev => prev.filter(m => m.id !== message.id))}
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                      {message.transcript && (
                        <div className="space-y-2">
                        <p className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                            <strong>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:</strong> {message.transcript}
                          </p>
                          
                          {message.chunks && message.chunks.length > 0 && (
                            <div className="space-y-1">
                              <p className={`text-xs font-medium ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                                üìù –ß–∞–Ω–∫–∏ Mod1 ({message.chunks.length}):
                              </p>
                              <div className="space-y-1 max-h-32 overflow-y-auto">
                                {message.chunks.map((chunk, index) => (
                                  <div key={chunk.chunk_id} className={`text-xs p-2 rounded ${
                                    isDark ? 'bg-white/5 border border-white/10' : 'bg-gray-100 border border-gray-200'
                                  }`}>
                                    <div className="flex items-center justify-between">
                                      <span className="font-mono text-blue-500">#{chunk.seq}</span>
                                      <span className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                                        {chunk.lang}
                                      </span>
                                    </div>
                                    <p className="mt-1">{chunk.text}</p>
                                    {chunk.overlap_prefix && (
                                      <p className={`text-xs mt-1 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                                        <strong>Overlap:</strong> {chunk.overlap_prefix}
                                      </p>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                          
                          {message.finalResult && (
                            <div className={`text-xs p-3 rounded ${
                              isDark ? 'bg-green-500/10 border border-green-500/30' : 'bg-green-50 border border-green-200'
                            }`}>
                              <p className={`font-medium mb-2 ${isDark ? 'text-green-300' : 'text-green-700'}`}>
                                ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç Mod1 (ASR + Chunk)
                              </p>
                              <div className="grid grid-cols-2 gap-2">
                                <p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {message.finalResult.duration_sec?.toFixed(1) || 'N/A'}—Å</p>
                                <p><strong>–Ø–∑—ã–∫:</strong> {message.finalResult.lang || 'N/A'}</p>
                                <p><strong>–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤:</strong> {message.finalResult.total_chunks || 'N/A'}</p>
                                <p><strong>Session ID:</strong> {message.finalResult.session_id || 'N/A'}</p>
                              </div>
                            </div>
                          )}
                          
                          {message.layout && (
                            <div className={`text-xs p-3 rounded ${
                              isDark ? 'bg-purple-500/10 border border-purple-500/30' : 'bg-purple-50 border border-purple-200'
                            }`}>
                              <p className={`font-medium mb-2 ${isDark ? 'text-purple-300' : 'text-purple-700'}`}>
                                üé® Layout Mod2 (NLP + Layout)
                              </p>
                              <div className="space-y-2">
                                <div className="grid grid-cols-2 gap-2">
                                  <p><strong>–®–∞–±–ª–æ–Ω:</strong> {message.layout.layout.template}</p>
                                  <p><strong>–°–µ–∫—Ü–∏–π:</strong> {message.layout.layout.count}</p>
                                </div>
                                <div className="space-y-1">
                                  <p className={`font-medium ${isDark ? 'text-purple-200' : 'text-purple-600'}`}>
                                    –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Å–µ–∫—Ü–∏—è–º:
                                  </p>
                                  {message.layout?.layout?.sections && Object.entries(message.layout.layout.sections).map(([section, components]) => (
                                    <div key={section} className={`text-xs p-2 rounded ${
                                      isDark ? 'bg-white/5 border border-white/10' : 'bg-white border border-gray-200'
                                    }`}>
                                      <span className="font-medium capitalize">{section}:</span> 
                                      {Array.isArray(components) ? components.length : 0} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                                      {Array.isArray(components) && components.length > 0 && (
                                        <div className="mt-1 space-y-1">
                                          {components.map((comp: any, idx: number) => (
                                            <div key={idx} className={`text-xs px-2 py-1 rounded ${
                                              isDark ? 'bg-purple-500/20' : 'bg-purple-100'
                                            }`}>
                                              {typeof comp === 'object' && comp.component ? comp.component : comp}
                                            </div>
                                          ))}
                                        </div>
                                      )}
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
          )}
            </div>
      </div>
    </div>
  );
}

export default SessionPage;
