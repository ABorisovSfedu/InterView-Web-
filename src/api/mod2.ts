// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Mod2-v1 (NLP + Entity Extraction)
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ layout

import { fetchJson, API_CONFIG, TextUtils } from './config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Mod2 API
export interface Mod2IngestChunkRequest {
  session_id: string;
  chunk_id: string;
  seq: number;
  lang: string;
  text: string;
  timestamp?: number;
}

export interface Mod2IngestFullRequest {
  session_id: string;
  lang: string;
  text_full: string;
}

export interface Mod2EntitiesResponse {
  status: 'ok' | 'error';
  session_id: string;
  entities: string[];
  keyphrases: string[];
  chunks_processed: number;
  error?: string;
}

export interface Mod2LayoutResponse {
  status: 'ok' | 'error';
  session_id: string;
  layout: {
    template: string;
    sections: {
      hero: any[];
      main: any[];
      footer: any[];
    };
    count: number;
  };
  error?: string;
}

export interface Mod2DebugResponse {
  status: 'ok' | 'error';
  sentences: string[];
  lemmas: string;
  np_candidates: string[];
  error?: string;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mod2 API
 */
export class Mod2Client {
  private baseUrl: string;
  
  constructor(baseUrl = API_CONFIG.MOD2_BASE_URL) {
    this.baseUrl = baseUrl.replace(/\/$/, ''); // –£–±–∏—Ä–∞–µ–º trailing slash
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —á–∞–Ω–∫–∞–º
   * @param payload - –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ Mod2
   */
  async ingestChunk(payload: Mod2IngestChunkRequest): Promise<Mod2IngestChunkRequest> {
    if (!payload.text || TextUtils.isEmpty(payload.text)) {
      throw new Error('–¢–µ–∫—Å—Ç –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
    const normalizedText = TextUtils.normalize(payload.text);
    const normalizedPayload = {
      ...payload,
      text: normalizedText
    };
    
    const url = `${this.baseUrl}/v2/ingest/chunk`;
    
    try {
      console.log('üß† –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2 (chunk)...', {
        source: 'mod2',
        sessionId: payload.session_id,
        chunkId: payload.chunk_id,
        textLength: normalizedText.length,
        seq: payload.seq
      });
      
      const response = await fetchJson<Mod2IngestChunkRequest>(url, {
        method: 'POST',
        body: normalizedPayload,
        timeout: 15000
      }, {
        source: 'mod2-chunk',
        sessionId: payload.session_id
      });
      
      console.log('‚úÖ Mod2 chunk –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
        source: 'mod2',
        sessionId: payload.session_id,
        chunkId: payload.chunk_id
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Mod2 chunk:', {
        source: 'mod2',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId: payload.session_id,
        chunkId: payload.chunk_id
      });
      
      throw new Error(`Mod2 –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param payload - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
   * @returns –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async ingestFullText(payload: Mod2IngestFullRequest): Promise<{ status: string }> {
    if (!payload.text_full || TextUtils.isEmpty(payload.text_full)) {
      throw new Error('–¢–µ–∫—Å—Ç –¥–ª—è NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
    const normalizedText = TextUtils.normalize(payload.text_full);
    const normalizedPayload = {
      ...payload,
      text_full: normalizedText
    };
    
    const url = `${this.baseUrl}/v2/ingest/full`;
    
    try {
      console.log('üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2...', {
        source: 'mod2',
        sessionId: payload.session_id,
        textLength: normalizedText.length
      });
      
      const response = await fetchJson<{ status: string }>(url, {
        method: 'POST',
        body: normalizedPayload,
        timeout: 15000
      }, {
        source: 'mod2-full',
        sessionId: payload.session_id
      });
      
      console.log('‚úÖ Mod2 –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
        source: 'mod2',
        status: response.data.status,
        sessionId: payload.session_id
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Mod2 –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:', {
        source: 'mod2',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId: payload.session_id
      });
      
      throw new Error(`Mod2 –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö entities –∏–∑ —Å–µ—Å—Å–∏–∏
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns –º–∞—Å—Å–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
   */
  async getEntities(sessionId: string): Promise<Mod2EntitiesResponse> {
    const url = `${this.baseUrl}/v2/session/${sessionId}/entities`;
    
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ entities –æ—Ç Mod2...', {
        source: 'mod2',
        sessionId
      });
      
      const response = await fetchJson<Mod2EntitiesResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'mod2-entities',
        sessionId
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || 'Mod2 –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entities');
      }
      
      console.log('‚úÖ Entities –ø–æ–ª—É—á–µ–Ω—ã:', {
        source: 'mod2',
        sessionId,
        entitiesCount: response.data.entities.length,
        keyphrasesCount: response.data.keyphrases.length,
        chunksProcessed: response.data.chunks_processed
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è entities –æ—Ç Mod2:', {
        source: 'mod2',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return {
        status: 'error',
        session_id: sessionId,
        entities: [],
        keyphrases: [],
        chunks_processed: 0,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ layout –æ—Ç Mod2 —Å–µ—Ä–≤–∏—Å–∞
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns –±–∞–∑–æ–≤—ã–π layout –æ—Ç Mod2
   */
  async getLayout(sessionId: string): Promise<Mod2LayoutResponse> {
    const url = `${this.baseUrl}/v2/session/${sessionId}/layout`;
    
    try {
      console.log('üèóÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ layout –æ—Ç Mod2...', {
        source: 'mod2',
        sessionId
      });
      
      const response = await fetchJson<Mod2LayoutResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'mod2-layout',
        sessionId
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || 'Mod2 –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ layout');
      }
      
      console.log('‚úÖ Layout –ø–æ–ª—É—á–µ–Ω –æ—Ç Mod2:', {
        source: 'mod2',
        sessionId,
        template: response.data.layout.template,
        count: response.data.layout.count,
        sections: {
          hero: response.data.layout.sections.hero.length,
          main: response.data.layout.sections.main.length,
          footer: response.data.layout.sections.footer.length
        }
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è layout –æ—Ç Mod2:', {
        source: 'mod2',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π layout –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return {
        status: 'error',
        session_id: sessionId,
        layout: {
          template: 'hero-main-footer',
          sections: {
            hero: [],
            main: [],
            footer: []
          },
          count: 0
        },
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  /**
   * Debug endpoint –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
   * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NLP —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
   * @param text - —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
   * @param lang - —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  async debugParse(text: string, lang = 'ru-RU'): Promise<Mod2DebugResponse> {
    if (!text || TextUtils.isEmpty(text)) {
      throw new Error('–¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    const normalizedText = TextUtils.normalize(text);
    const payload = {
      text: normalizedText,
      lang
    };
    
    const url = `${this.baseUrl}/debug/parse`;
    
    try {
      console.log('üîç Debug –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2...', {
        source: 'mod2-debug',
        textLength: normalizedText.length,
        lang
      });
      
      const response = await fetchJson<Mod2DebugResponse>(url, {
        method: 'POST',
        body: payload,
        timeout: 10000
      }, {
        source: 'mod2-debug'
      });
      
      console.log('‚úÖ Debug –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        source: 'mod2-debug',
        sentencesCount: response.data.sentences.length,
        lemmasCount: response.data.lemmas.split(' ').length,
        npCandidatesCount: response.data.np_candidates.length
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ debug –ø–∞—Ä—Å–∏–Ω–≥–∞ Mod2:', {
        source: 'mod2-debug',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      
      throw new Error(`Debug –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mod2 —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetchJson(`${this.baseUrl}/healthz`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'mod2-health'
      });
      
      return response.data.status === 'ok';
    } catch (error) {
      console.warn('‚ö†Ô∏è Mod2 health check failed:', error);
      return false;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Å—Å–∏–∏
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async getSessionStats(sessionId: string): Promise<{
    chunks_processed: number;
    entities_count: number;
    keyphrases_count: number;
    last_processed: string | null;
  }> {
    try {
      const entitiesResponse = await this.getEntities(sessionId);
      
      return {
        chunks_processed: entitiesResponse.chunks_processed,
        entities_count: entitiesResponse.entities.length,
        keyphrases_count: entitiesResponse.keyphrases.length,
        last_processed: entitiesResponse.chunks_processed > 0 ? new Date().toISOString() : null
      };
    } catch (error) {
      return {
        chunks_processed: 0,
        entities_count: 0,
        keyphrases_count: 0,
        last_processed: null
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const mod2Client = new Mod2Client(API_CONFIG.MOD2_BASE_URL);

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default mod2Client;
