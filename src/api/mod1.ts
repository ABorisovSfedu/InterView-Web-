// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Mod1_v2 (ASR + Transcription)
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

import { fetchJson, API_CONFIG } from './config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Mod1 API
export interface Mod1TranscribeOptions {
  session_id: string;
  chunk_id?: string;
  lang?: string;
  timestamp?: number;
}

export interface Mod1TranscribeResponse {
  status: 'ok' | 'error';
  session_id: string;
  chunk_id?: string;
  text: string;
  confidence?: number;
  language?: string;
  error?: string;
}

export interface AudioFile {
  file: File;
  sessionId: string;
  chunkId?: string;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mod1 API
 */
export class Mod1Client {
  private baseUrl: string;
  
  constructor(baseUrl = API_CONFIG.MOD1_BASE_URL) {
    this.baseUrl = baseUrl.replace(/\/$/, ''); // –£–±–∏—Ä–∞–µ–º trailing slash
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
   * @param audioFile - –æ–±—ä–µ–∫—Ç —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  async transcribe(audioFile: AudioFile): Promise<Mod1TranscribeResponse> {
    const { file, sessionId, chunkId } = audioFile;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª
    if (!file.type.startsWith('audio/')) {
      throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–∞');
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = file.name || `audio_${Date.now()}.webm`;
    
    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è multipart –∑–∞–ø—Ä–æ—Å–∞
    const formData = new FormData();
    formData.append('file', file, fileName);
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const params = new URLSearchParams({
      session_id: sessionId,
      lang: 'ru-RU'
    });
    
    if (chunkId) {
      params.append('chunk_id', chunkId);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    const timestamp = Date.now();
    params.append('timestamp', timestamp.toString());
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL
    const url = `${this.baseUrl}/v1/transcribe?${params.toString()}`;
    
    try {
      console.log('üé§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –≤ Mod1...', {
        source: 'mod1',
        fileName: file.name,
        size: file.size,
        type: file.type,
        sessionId,
        chunkId
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å multipart/form-data
      const response = await fetchJson<Mod1TranscribeResponse>(url, {
        method: 'POST',
        headers: {
          // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è multipart
        },
        body: formData,
        retries: 2,
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      }, {
        source: 'mod1',
        sessionId
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || 'Mod1 –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç—É—Å–µ');
      }
      
      console.log('‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', {
        source: 'mod1',
        text: response.data.text.substring(0, 50) + '...',
        confidence: response.data.confidence,
        sessionId: response.data.session_id
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ Mod1:', {
        source: 'mod1',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId,
        fileName: file.name
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
      if (error instanceof Error) {
        return {
          status: 'error',
          session_id: sessionId,
          chunk_id: chunkId,
          text: '',
          error: error.message
        };
      }
      
      throw error;
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –∏–∑ WebM chunks –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @param chunks - –º–∞—Å—Å–∏–≤ –∞—É–¥–∏–æ chunks
  'sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns –ø—Ä–æ–º–∏—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
   */
  async transcribeFromChunks(
    chunks: Blob[], 
    sessionId: string,
    language = 'ru-RU'
  ): Promise<Mod1TranscribeResponse> {
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º chunks –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
    const combinedBlob = new Blob(chunks, { type: 'audio/webm' });
    const audioFile = new File([combinedBlob], `audio_${sessionId}.webm`, {
      type: 'audio/webm'
    });
    
    return this.transcribe({
      file: audioFile,
      sessionId,
      chunkId: `chunk_combined_${Date.now()}`
    });
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mod1 —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetchJson(`${this.baseUrl}/healthz`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'mod1-health'
      });
      
      return response.data.status === 'ok';
    } catch (error) {
      console.warn('‚ö†Ô∏è Mod1 health check failed:', error);
      return false;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∞—É–¥–∏–æ
   */
  async getSupportedFormats(): Promise<string[]> {
    try {
      const response = await fetchJson(`${this.baseUrl}/v1/formats`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'mod1-formats'
      });
      
      return response.data?.formats || ['audio/webm', 'audio/wav', 'audio/mp3'];
    } catch (error) {
      // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
      return ['audio/webm', 'audio/wav', 'audio/mp3'];
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –∏–∑ MediaRecorder chunks
   * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-–∞—É–¥–∏–æ
   */
  static createAudioFileFromRecorder(
    chunks: Blob[],
    sessionId: string,
    fileName?: string
  ): AudioFile {
    const combinedBlob = new Blob(chunks, { type: 'audio/webm' });
    const file = new File([combinedBlob], fileName || `recording_${sessionId}.webm`, {
      type: 'audio/webm'
    });
    
    return {
      file,
      sessionId,
      chunkId: `chunk_${Date.now()}`
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const mod1Client = new Mod1Client();

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default mod1Client;

