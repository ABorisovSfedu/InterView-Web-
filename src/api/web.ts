// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Backend Orchestrator (Web App)
// –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –º–æ–¥—É–ª—è–º–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout

import { fetchJson, API_CONFIG } from './config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Web API
export interface WebLayoutRequest {
  layout: any; // PageModel –∏–ª–∏ Block[]
  metadata?: {
    sessionId: string;
    updatedAt: string;
    source: string;
  };
}

export interface WebLayoutResponse {
  status: 'ok' | 'error';
  session_id: string;
  layout_data: any;
  created_at: string;
  updated_at: string;
  error?: string;
}

export interface WebComponent {
  id: string;
  name: string;
  type: string;
  category: string;
  description: string;
  props: any;
  defaultProps: any;
  example_props: any;
  preview?: string;
}

export interface WebComponentsResponse {
  status: 'ok' | 'error';
  components: WebComponent[];
  categories: string[];
  error?: string;
}

export interface WebSessionInfo {
  session_id: string;
  created_at: string;
  updated_at: string;
  layout_count: number;
  last_activity: string;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Web API (–±—ç–∫–µ–Ω–¥ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ layout –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class WebClient {
  private baseUrl: string;
  
  constructor(baseUrl = API_CONFIG.API_BASE_URL) {
    this.baseUrl = baseUrl.replace(/\/$/, ''); // –£–±–∏—Ä–∞–µ–º trailing slash
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout –≤ –±—ç–∫–µ–Ω–¥–µ
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @param layout - layout –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveLayout(sessionId: string, layout: any): Promise<WebLayoutResponse> {
    if (!layout) {
      throw new Error('Layout –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º layout –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    const validatedLayout = this.validateLayout(layout);
    
    const payload: WebLayoutRequest = {
      layout: validatedLayout,
      metadata: {
        sessionId,
        updatedAt: new Date().toISOString(),
        source: 'frontend'
      }
    };
    
    const url = `${this.baseUrl}/api/web/v1/session/${sessionId}/layout`;
    
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout –≤ –±—ç–∫–µ–Ω–¥–µ...', {
        source: 'web-backend',
        sessionId,
        layoutType: Array.isArray(layout) ? 'blocks' : 'pageModel',
        componentsCount: this.countComponents(validatedLayout)
      });
      
      const response = await fetchJson<WebLayoutResponse>(url, {
        method: 'POST',
        body: payload,
        timeout: 15000
      }, {
        source: 'web-save-layout',
        sessionId
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || '–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ layout');
      }
      
      console.log('‚úÖ Layout —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±—ç–∫–µ–Ω–¥–µ:', {
        source: 'web-backend',
        sessionId,
        createdAt: response.data.created_at,
        updatedAt: response.data.updated_at
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è layout –≤ –±—ç–∫–µ–Ω–¥–µ:', {
        source: 'web-backend',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      throw new Error(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout –Ω–µ —É–¥–∞–ª–æ—Å—å: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π layout
   */
  async loadLayout(sessionId: string): Promise<WebLayoutResponse> {
    const url = `${this.baseUrl}/api/web/v1/session/${sessionId}/layout`;
    
    try {
      console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞...', {
        source: 'web-backend',
        sessionId
      });
      
      const response = await fetchJson<WebLayoutResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'web-load-layout',
        sessionId
      });
      
      if (response.data.status !== 'ok') {
        return {
          status: 'error',
          session_id: sessionId,
          layout_data: null,
          created_at: '',
          updated_at: '',
          error: response.data.error || 'Layout –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }
      
      console.log('‚úÖ Layout –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –±—ç–∫–µ–Ω–¥–∞:', {
        source: 'web-backend',
        sessionId,
        createdAt: response.data.created_at,
        updatedAt: response.data.updated_at,
        hasLayout: !!response.data.layout_data
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞:', {
        source: 'web-backend',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      return {
        status: 'error',
        session_id: sessionId,
        layout_data: null,
        created_at: '',
        updated_at: '',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   * @returns —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async getWebComponents(): Promise<WebComponentsResponse> {
    const url = `${this.baseUrl}/web/v1/components`;
    
    try {
      console.log('üß≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...', {
        source: 'web-backend'
      });
      
      const response = await fetchJson<WebComponentsResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'web-components'
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || '–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      }
      
      console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', {
        source: 'web-backend',
        count: response.data.components.length,
        categories: response.data.categories
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
        source: 'web-backend',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        status: 'error',
        components: this.getFallbackComponents(),
        categories: ['ui', 'content', 'layout'],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
   */
  async getSessionInfo(sessionId: string): Promise<WebSessionInfo | null> {
    const url = `${this.baseUrl}/web/v1/session/${sessionId}/info`;
    
    try {
      const response = await fetchJson<WebSessionInfo>(url, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'web-session-info',
        sessionId
      });
      
      return response.data;
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏:', error);
      return null;
    }
  }
  
  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteLayout(sessionId: string): Promise<{ status: string }> {
    const url = `${this.baseUrl}/api/web/v1/session/${sessionId}/layout`;
    
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞...', {
        source: 'web-backend',
        sessionId
      });
      
      const response = await fetchJson<{ status: string }>(url, {
        method: 'DELETE',
        timeout: 10000
      }, {
        source: 'web-delete-layout',
        sessionId
      });
      
      console.log('‚úÖ Layout —É–¥–∞–ª–µ–Ω –∏–∑ –±—ç–∫–µ–Ω–¥–∞:', {
        source: 'web-backend',
        sessionId,
        status: response.data.status
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è layout –∏–∑ –±—ç–∫–µ–Ω–¥–∞:', {
        source: 'web-backend',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      throw new Error(`–£–¥–∞–ª–µ–Ω–∏–µ layout –Ω–µ —É–¥–∞–ª–æ—Å—å: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è layout –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
   * @param layout - layout –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @returns –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π layout
   */
  private validateLayout(layout: any): any {
    if (!layout) {
      throw new Error('Layout –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ blocks
    if (Array.isArray(layout)) {
      return layout.filter(block => block && block.component);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ PageModel
    if (layout.sections) {
      return {
        ...layout,
        sections: {
          hero: (layout.sections.hero || []).filter((block: any) => block && block.component),
          main: (layout.sections.main || []).filter((block: any) => block && block.component),
          footer: (layout.sections.footer || []).filter((block: any) => block && block.component)
        }
      };
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    return layout;
  }
  
  /**
   * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ layout
   * @param layout - layout –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
   * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  private countComponents(layout: any): number {
    if (Array.isArray(layout)) {
      return layout.length;
    }
    
    if (layout.sections) {
      return (layout.sections.hero?.length || 0) + 
             (layout.sections.main?.length || 0) + 
             (layout.sections.footer?.length || 0);
    }
    
    return 0;
  }
  
  /**
   * Fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
   * @returns —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  private getFallbackComponents(): WebComponent[] {
    return [
      {
        id: 'ui-button',
        name: 'ui.button',
        type: 'ui.button',
        category: 'ui',
        description: '–ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        props: {
          text: { type: 'string', required: true, default: '–ö–Ω–æ–ø–∫–∞' },
          variant: { type: 'string', required: false, default: 'primary' },
          size: { type: 'string', required: false, default: 'medium' }
        },
        defaultProps: { text: '–ö–Ω–æ–ø–∫–∞', variant: 'primary', size: 'medium' },
        example_props: { text: '–ù–∞–∂–º–∏ –º–µ–Ω—è', variant: 'primary', size: 'large' }
      },
      {
        id: 'ui-heading',
        name: 'ui.heading',
        type: 'ui.heading', 
        category: 'ui',
        description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è',
        props: {
          text: { type: 'string', required: true, default: '–ó–∞–≥–æ–ª–æ–≤–æ–∫' },
          level: { type: 'number', required: false, default: 1 },
          variant: { type: 'string', required: false, default: 'default' }
        },
        defaultProps: { text: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', level: 1, variant: 'default' },
        example_props: { text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', level: 2, variant: 'hero' }
      },
      {
        id: 'ui-text',
        name: 'ui.text',
        type: 'ui.text',
        category: 'ui',
        description: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
        props: {
          text: { type: 'string', required: true, default: '–¢–µ–∫—Å—Ç' },
          variant: { type: 'string', required: false, default: 'body' }
        },
        defaultProps: { text: '–¢–µ–∫—Å—Ç', variant: 'body' },
        example_props: { text: '–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç...', variant: 'lead' }
      }
    ];
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–±-–±—ç–∫–µ–Ω–¥–∞
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetchJson(`${this.baseUrl}/health`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'web-health'
      });
      
      return response.data?.status === 'ok';
    } catch (error) {
      console.warn('‚ö†Ô∏è Web backend health check failed:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const webClient = new WebClient();

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default webClient;

