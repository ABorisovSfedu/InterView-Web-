// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Mod3-v1 (Visual Elements Mapping)
// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö layout

import { fetchJson, API_CONFIG, ComponentCache } from './config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Mod3 API
export interface Mod3MapRequest {
  session_id: string;
  entities: string[];
  keyphrases: string[];
  template?: string;
}

export interface ComponentMetadata {
  component: string;
  component_type?: string;
  confidence: number;
  match_type: 'exact' | 'synonym' | 'fuzzy' | 'fallback';
  rule_id?: number;
  score?: number;
  props?: Record<string, any>;
  metadata?: {
    confidence: number;
    match_type: string;
    source?: string;
  };
}

export interface Mod3LayoutResponse {
  status: 'ok' | 'error';
  session_id: string;
  layout: {
    template: string;
    sections: {
      hero: ComponentMetadata[];
      main: ComponentMetadata[];
      footer: ComponentMetadata[];
    };
    count: number;
  };
  matches?: Array<{
    term: string;
    component: string;
    component_type?: string;
    confidence: number;
    match_type: string;
    rule_id?: number;
    score?: number;
  }>;
  explanations?: Array<{
    term: string;
    matched_component: string;
    match_type: string;
    score: number;
    rule_id?: number;
  }>;
  error?: string;
}

export interface Mod3Component {
  name: string;
  component_type: string;
  description: string;
  props?: Record<string, any>;
  examples?: string[];
}

export interface Mod3ComponentsResponse {
  status: 'ok' | 'error';
  components: Mod3Component[];
  error?: string;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Mod3 API
 * –í–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∏–º–µ–Ω
 */
export class Mod3Client {
  private baseUrl: string;
  
  constructor(baseUrl = API_CONFIG.MOD3_BASE_URL) {
    this.baseUrl = baseUrl.replace(/\/$/, ''); // –£–±–∏—Ä–∞–µ–º trailing slash
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è entities —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
   * @param payload - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * @returns –¥–µ—Ç–∞–ª—å–Ω—ã–π layout —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ confidence scores
   */
  async mapEntities(payload: Mod3MapRequest): Promise<Mod3LayoutResponse> {
    if (!payload.entities || payload.entities.length === 0) {
      throw new Error('Entities –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π payload –±–µ–∑ –º—É—Ç–∞—Ü–∏–π
    const apiPayload = {
      session_id: payload.session_id,
      entities: [...payload.entities], // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
      keyphrases: payload.keyphrases ? [...payload.keyphrases] : [...payload.entities],
      template: payload.template || 'hero-main-footer'
    };
    
    const url = `${this.baseUrl}/v1/map`;
    
    try {
      console.log('üé® –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏...', {
        source: 'mod3',
        sessionId: payload.session_id,
        entitiesCount: apiPayload.entities.length,
        template: apiPayload.template,
        entities: apiPayload.entities.slice(0, 5) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
      });
      
      const response = await fetchJson<Mod3LayoutResponse>(url, {
        method: 'POST',
        body: apiPayload,
        timeout: 20000 // Mod3 –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ —Å–∏–Ω–∫—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
      }, {
        source: 'mod3-map',
        sessionId: payload.session_id
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || 'Mod3 –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏');
      }
      
      // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const stats = this.analyzeLayout(response.data.layout);
      
      console.log('‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
        source: 'mod3',
        sessionId: payload.session_id,
        totalComponents: response.data.layout.count,
        sections: stats.sections,
        confidence: stats.averageConfidence,
        matches: response.data.matches?.length || 0
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è Mod3:', {
        source: 'mod3',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId: payload.session_id,
        entitiesCount: payload.entities.length
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π layout –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        status: 'error',
        session_id: payload.session_id,
        layout: {
          template: apiPayload.template,
          sections: {
            hero: [],
            main: [],
            footer: []
          },
          count: 0
        },
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ layout –∏–∑ Mod3
   * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏
   * @returns —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π layout
   */
  async getLayout(sessionId: string): Promise<Mod3LayoutResponse> {
    const url = `${this.baseUrl}/v1/layout/${sessionId}`;
    
    try {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ layout –∏–∑ Mod3...', {
        source: 'mod3',
        sessionId
      });
      
      const response = await fetchJson<Mod3LayoutResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'mod3-layout',
        sessionId
      });
      
      if (response.data.status !== 'ok') {
        return {
          status: 'error',
          session_id: sessionId,
          layout: {
            template: 'hero-main-footer',
            sections: { hero: [], main: [], footer: [] },
            count: 0
          },
          error: 'Layout –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        };
      }
      
      console.log('‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π layout –ø–æ–ª—É—á–µ–Ω:', {
        source: 'mod3',
        sessionId,
        template: response.data.layout.template,
        count: response.data.layout.count
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è layout –∏–∑ Mod3:', {
        source: 'mod3',
        error: error instanceof Error ? error.message : 'Unknown error',
        sessionId
      });
      
      throw new Error(`Layout –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   * @returns —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  async getComponents(): Promise<Mod3ComponentsResponse> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = ComponentCache.get();
    if (cached) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:', {
        source: 'mod3',
        count: cached.components?.length || 0
      });
      return cached;
    }
    
    const url = `${this.baseUrl}/v1/components`;
    
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ Mod3...', {
        source: 'mod3'
      });
      
      const response = await fetchJson<Mod3ComponentsResponse>(url, {
        method: 'GET',
        timeout: 10000
      }, {
        source: 'mod3-components'
      });
      
      if (response.data.status !== 'ok') {
        throw new Error(response.data.error || 'Mod3 –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      }
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      ComponentCache.set(response.data);
      
      console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', {
        source: 'mod3',
        count: response.data.components.length
      });
      
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–∑ Mod3:', {
        source: 'mod3',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const emptyResponse = {
        status: 'error' as const,
        components: [],
        error: error instanceof Error ? error.message : 'Unknown error'
      };
      
      return emptyResponse;
    }
  }
  
  /**
   * –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∫ ui.* —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
   * @param componentName - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @returns –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è
   */
  normalizeComponentName(componentName: string): string {
    if (!componentName) return 'ui.unknown';
    
    // –ï—Å–ª–∏ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ui., –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (componentName.startsWith('ui.')) {
      return componentName;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ui.
    return `ui.${componentName}`;
  }
  
  /**
   * –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ui.* –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
   * @param componentName - –∏–º—è —Å ui.* –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
   * @returns –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è API
   */
  denormalizeComponentName(componentName: string): string {
    if (!componentName) return '';
    
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å ui. –µ—Å–ª–∏ –µ—Å—Ç—å
    if (componentName.startsWith('ui.')) {
      return componentName.substring(3);
    }
    
    return componentName;
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ layout –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @param layout - layout –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
   */
  private analyzeLayout(layout: any) {
    const sections = {
      hero: layout.sections.hero?.length || 0,
      main: layout.sections.main?.length || 0,
      footer: layout.sections.footer?.length || 0
    };
    
    const allComponents = [
      ...(layout.sections.hero || []),
      ...(layout.sections.main || []),
      ...(layout.sections.footer || [])
    ];
    
    const confidences = allComponents
      .map(c => c.confidence || 0)
      .filter(c => c > 0);
    
    const averageConfidence = confidences.length > 0 
      ? confidences.reduce((a, b) => a + b, 0) / confidences.length 
      : 0;
    
    return {
      sections,
      totalComponents: layout.count || 0,
      averageConfidence: Math.round(averageConfidence * 100) / 100
    };
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mod3 —Å–µ—Ä–≤–∏—Å–∞
   */
  async healthCheck(): Promise<boolean> {
    try {
      const response = await fetchJson(`${this.baseUrl}/healthz`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'mod3-health'
      });
      
      return response.data.status === 'ok';
    } catch (error) {
      console.warn('‚ö†Ô∏è Mod3 health check failed:', error);
      return false;
    }
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
   * @returns –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
   */
  async getTemplates(): Promise<string[]> {
    try {
      const response = await fetchJson(`${this.baseUrl}/v1/templates`, {
        method: 'GET',
        timeout: 5000
      }, {
        source: 'mod3-templates'
      });
      
      return response.data?.templates || ['hero-main-footer'];
    } catch (error) {
      // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
      return ['hero-main-footer'];
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param componentName - –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @returns true –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  async isComponentAvailable(componentName: string): Promise<boolean> {
    try {
      const components = await this.getComponents();
      const normalizedName = this.denormalizeComponentName(componentName);
      
      return components.components.some(
        comp => comp.name === normalizedName || comp.component_type === normalizedName
      );
    } catch (error) {
      return false;
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  clearCache(): void {
    ComponentCache.clear();
    console.log('üóëÔ∏è –ö—ç—à –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Mod3 –æ—á–∏—â–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const mod3Client = new Mod3Client(API_CONFIG.MOD3_BASE_URL);

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default mod3Client;
