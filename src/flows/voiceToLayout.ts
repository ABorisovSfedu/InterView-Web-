// End-to-end –ø–æ—Ç–æ–∫: Voice Audio ‚Üí Layout Generation
// –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

import { mod1Client, Mod1TranscribeResponse } from '../api/mod1';
import { mod2Client, Mod2EntitiesResponse, Mod2LayoutResponse } from '../api/mod2';
import { mod3Client, Mod3LayoutResponse } from '../api/mod3';
import { webClient, WebLayoutResponse } from '../api/web';
import { DataAdapters, SessionManager } from '../api/config';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
export interface VoiceToLayoutOptions {
  audioFile: File;
  sessionId?: string;
  skipMod3?: boolean; // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å Mod3 –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Mod2 layout
  autoSave?: boolean;  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±—ç–∫–µ–Ω–¥–µ
  template?: string;   // –®–∞–±–ª–æ–Ω –¥–ª—è Mod3 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'hero-main-footer')
}

export interface VoiceToLayoutProgress {
  step: 'transcribe' | 'nlp' | 'entities' | 'visual-mapping' | 'save' | 'complete';
  progress: number; // 0-100
  message: string;
  data?: any;
}

export interface VoiceToLayoutResult {
  success: boolean;
  sessionId: string;
  transcription?: string;
  entities?: string[];
  keyphrases?: string[];
  mod2Layout?: Mod2LayoutResponse;
  mod3Layout?: Mod3LayoutResponse;
  finalLayout?: any; // PageModel –∏–ª–∏ Block[]
  webLayout?: WebLayoutResponse;
  error?: string;
  steps: VoiceToLayoutProgress[];
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ end-to-end –ø–æ—Ç–æ–∫–∞
 */
export class VoiceToLayoutFlow {
  private currentProgress: VoiceToLayoutProgress[] = [];
  private onProgressCallback?: (progress: VoiceToLayoutProgress[]) => void;
  
  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–ª–ª–±—ç–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  constructor(onProgress?: (progress: VoiceToLayoutProgress[]) => void) {
    this.onProgressCallback = onProgress;
  }
  
  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–∞ voice to layout
   * @param options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
   * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
   */
  async process(options: VoiceToLayoutOptions): Promise<VoiceToLayoutResult> {
    this.currentProgress = [];
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º session ID
      const sessionId = options.sessionId || SessionManager.getSessionId();
      SessionManager.setSessionId(sessionId);
      
      console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º voice-to-layout –ø–æ—Ç–æ–∫...', {
        sessionId,
        audioSize: options.audioFile.size,
        audioType: options.audioFile.type,
        skipMod3: options.skipMod3,
        autoSave: options.autoSave
      });
      
      // –®–∞–≥ 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ (Mod1)
      const transcription = await this.stepTranscribe(options.audioFile, sessionId);
      if (!transcription.success) {
        return this.createErrorResult(sessionId, '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–∞—Å—å', transcription.error);
      }
      
      // –®–∞–≥ 2: NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (Mod2)
      const nlpResult = await this.stepNLP(transcription.data.text, sessionId);
      if (!nlpResult.success) {
        return this.createErrorResult(sessionId, 'NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å', nlpResult.error);
      }
      
      // –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ entities (Mod2)
      const entitiesResult = await this.stepGetEntities(sessionId);
      if (!entitiesResult.success) {
        return this.createErrorResult(sessionId, '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ entities –Ω–µ —É–¥–∞–ª–æ—Å—å', entitiesResult.error);
      }
      
      // –®–∞–≥ 4: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (Mod3) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Mod2 layout
      let mod3Result;
      let finalLayout;
      
      if (options.skipMod3 || entitiesResult.data.entities.length === 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º layout –æ—Ç Mod2
        const mod2LayoutResult = await this.stepGetMod2Layout(sessionId);
        if (mod2LayoutResult.success) {
          finalLayout = mod2LayoutResult.data;
          mod3Result = { success: false, data: null };
        } else {
          return this.createErrorResult(sessionId, '–ü–æ–ª—É—á–µ–Ω–∏–µ Mod2 layout –Ω–µ —É–¥–∞–ª–æ—Å—å', mod2LayoutResult.error);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Mod3 –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        mod3Result = await this.stepMod3Mapping(entitiesResult.data, sessionId, options.template);
        if (mod3Result.success) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Mod3 layout –≤ —Ñ–æ—Ä–º–∞—Ç PageModel
          finalLayout = DataAdapters.fromMod3(mod3Result.data);
        } else {
          return this.createErrorResult(sessionId, '–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Mod3 –Ω–µ —É–¥–∞–ª–æ—Å—å', mod3Result.error);
        }
      }
      
      // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—ç–∫–µ–Ω–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      let webLayoutResult;
      if (options.autoSave && finalLayout) {
        webLayoutResult = await this.stepSaveLayout(sessionId, finalLayout);
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result: VoiceToLayoutResult = {
        success: true,
        sessionId,
        transcription: transcription.data.text,
        entities: entitiesResult.data.entities,
        keyphrases: entitiesResult.data.keyphrases,
        mod2Layout: mod2LayoutResult?.data,
        mod3Layout: mod3Result.success ? mod3Result.data : undefined,
        finalLayout,
        webLayout: webLayoutResult?.success ? webLayoutResult.data : undefined,
        steps: [...this.currentProgress]
      };
      
      console.log('‚úÖ Voice-to-layout –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', {
        sessionId,
        transcriptionLength: transcription.data.text.length,
        entitiesCount: entitiesResult.data.entities.length,
        componentsGenerated: finalLayout ? this.countComponents(finalLayout) : 0,
        completedSteps: this.currentProgress.length
      });
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ voice-to-layout –ø–æ—Ç–æ–∫–µ:', error);
      return this.createErrorResult(
        options.sessionId || SessionManager.getSessionId(),
        '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        error instanceof Error ? error.message : 'Unknown error'
      );
    }
  }
  
  /**
   * –®–∞–≥ 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ
   */
  private async stepTranscribe(audioFile: File, sessionId: string): Promise<{
    success: boolean;
    data?: Mod1TranscribeResponse;
    error?: string;
  }> {
    this.updateProgress({
      step: 'transcribe',
      progress: 10,
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –≤ Mod1...'
    });
    
    try {
      const result = await mod1Client.transcribe({
        file: audioFile,
        sessionId,
        chunkId: `chunk_${Date.now()}`
      });
      
      this.updateProgress({
        step: 'transcribe',
        progress: 25,
        message: '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        data: { transcription: result.text }
      });
      
      return { success: true, data: result };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏';
      this.updateProgress({
        step: 'transcribe',
        progress: 25,
        message: `–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –®–∞–≥ 2: NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  private async stepNLP(text: string, sessionId: string): Promise<{
    success: boolean;
    data?: any;
    error?: string;
  }> {
    this.updateProgress({
      step: 'nlp',
      progress: 40,
      message: 'NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Mod2...'
    });
    
    try {
      await mod2Client.ingestFullText({
        session_id: sessionId,
        lang: 'ru-RU',
        text_full: text
      });
      
      this.updateProgress({
        step: 'nlp',
        progress: 50,
        message: 'NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        data: { textProcessed: text.length }
      });
      
      return { success: true };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ NLP –æ–±—Ä–∞–±–æ—Ç–∫–∏';
      this.updateProgress({
        step: 'nlp',
        progress: 50,
        message: `–û—à–∏–±–∫–∞ NLP: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ entities
   */
  private async stepGetEntities(sessionId: string): Promise<{
    success: boolean;
    data?: Mod2EntitiesResponse;
    error?: string;
  }> {
    this.updateProgress({
      step: 'entities',
      progress: 60,
      message: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞...'
    });
    
    try {
      const entities = await mod2Client.getEntities(sessionId);
      
      this.updateProgress({
        step: 'entities',
        progress: 75,
        message: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${entities.entities.length} —Å—É—â–Ω–æ—Å—Ç–µ–π`,
        data: { entitiesCount: entities.entities.length, entities: entities.entities.slice(0, 3) }
      });
      
      return { success: true, data: entities };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è entities';
      this.updateProgress({
        step: 'entities',
        progress: 75,
        message: `–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ layout –æ—Ç Mod2
   */
  private async stepGetMod2Layout(sessionId: string): Promise<{
    success: boolean;
    data?: Mod2LayoutResponse;
    error?: string;
  }> {
    this.updateProgress({
      step: 'visual-mapping',
      progress: 80,
      message: '–ü–æ–ª—É—á–µ–Ω–∏–µ layout –æ—Ç Mod2...'
    });
    
    try {
      const layout = await mod2Client.getLayout(sessionId);
      
      this.updateProgress({
        step: 'visual-mapping',
        progress: 90,
        message: `–ü–æ–ª—É—á–µ–Ω layout —Å ${layout.layout.count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏`,
        data: { componentsCount: layout.layout.count, template: layout.layout.template }
      });
      
      return { success: true, data: layout };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Mod2 layout';
      this.updateProgress({
        step: 'visual-mapping',
        progress: 90,
        message: `–û—à–∏–±–∫–∞ Mod2 layout: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –®–∞–≥ 5: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ Mod3
   */
  private async stepMod3Mapping(entitiesData: Mod2EntitiesResponse, sessionId: string, template?: string): Promise<{
    success: boolean;
    data?: Mod3LayoutResponse;
    error?: string;
  }> {
    this.updateProgress({
      step: 'visual-mapping',
      progress: 80,
      message: '–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ Mod3...'
    });
    
    try {
      const mapping = await mod3Client.mapEntities({
        session_id: sessionId,
        entities: entitiesData.entities,
        keyphrases: entitiesData.keyphrases,
        template: template || 'hero-main-footer'
      });
      
      this.updateProgress({
        step: 'visual-mapping',
        progress: 90,
        message: `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${mapping.layout.count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`,
        data: { 
          componentsCount: mapping.layout.count,
          template: mapping.layout.template,
          sections: {
            hero: mapping.layout.sections.hero.length,
            main: mapping.layout.sections.main.length,
            footer: mapping.layout.sections.footer.length
          }
        }
      });
      
      return { success: true, data: mapping };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ Mod3 —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è';
      this.updateProgress({
        step: 'visual-mapping',
        progress: 90,
        message: `–û—à–∏–±–∫–∞ Mod3: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout –≤ –±—ç–∫–µ–Ω–¥–µ
   */
  private async stepSaveLayout(sessionId: string, layout: any): Promise<{
    success: boolean;
    data?: WebLayoutResponse;
    error?: string;
  }> {
    this.updateProgress({
      step: 'save',
      progress: 95,
      message: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ layout –≤ –±—ç–∫–µ–Ω–¥–µ...'
    });
    
    try {
      const result = await webClient.saveLayout(sessionId, layout);
      
      this.updateProgress({
        step: 'complete',
        progress: 100,
        message: '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        data: { saved: true, updatedAt: result.updated_at }
      });
      
      return { success: true, data: result };
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
      this.updateProgress({
        step: 'save',
        progress: 100,
        message: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${errorMessage}`
      });
      
      return { success: false, error: errorMessage };
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  private updateProgress(progress: VoiceToLayoutProgress): void {
    this.currentProgress.push(progress);
    
    if (this.onProgressCallback) {
      this.onProgressCallback([...this.currentProgress]);
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
   */
  private createErrorResult(sessionId: string, message: string, error?: string): VoiceToLayoutResult {
    return {
      success: false,
      sessionId,
      error: `${message}: ${error || 'Unknown error'}`,
      steps: [...this.currentProgress]
    };
  }
  
  /**
   * –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ layout
   */
  private countComponents(layout: any): number {
    if (Array.isArray(layout)) {
      return layout.length;
    }
    
    if (layout.sections) {
      return (layout.sections.hero?.length || 0) + 
             (layout.sections.main?.length || 0) + 
             (layout.sections.footer?.length || 0);
    }
    
    return 0;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  getLastProgress(): VoiceToLayoutProgress | null {
    return this.currentProgress[this.currentProgress.length - 1] || null;
  }
  
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  getAllProgress(): VoiceToLayoutProgress[] {
    return [...this.currentProgress];
  }
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * @param audioFile - –∞—É–¥–∏–æ —Ñ–∞–π–ª
 * @param options - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function convertVoiceToLayout(
  audioFile: File, 
  options: Omit<VoiceToLayoutOptions, 'audioFile'> = {}
): Promise<VoiceToLayoutResult> {
  const flow = new VoiceToLayoutFlow();
  return flow.process({ audioFile, ...options });
}

/**
 * –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ –∞—É–¥–∏–æ)
 * @param text - —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param sessionId - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function convertTextToLayout(
  text: string,
  sessionId?: string
): Promise<VoiceToLayoutResult> {
  if (!text || text.trim().length === 0) {
    throw new Error('–¢–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
  }
  
  const actualSessionId = sessionId || SessionManager.getSessionId();
  
  console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º text-to-layout –ø–æ—Ç–æ–∫...', {
    sessionId: actualSessionId,
    textLength: text.length
  });
  
  // –®–∞–≥ 1: NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞
  await mod2Client.ingestFullText({
    session_id: actualSessionId,
    lang: 'ru-RU',
    text_full: text
  });
  
  // –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ entities  
  const entities = await mod2Client.getEntities(actualSessionId);
  
  // –®–∞–≥ 3: –í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
  const mod3Layout = await mod3Client.mapEntities({
    session_id: actualSessionId,
    entities: entities.entities,
    keyphrases: entities.keyphrases,
    template: 'hero-main-footer'
  });
  
  // –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PageModel
  const finalLayout = DataAdapters.fromMod3(mod3Layout);
  
  // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—ç–∫–µ–Ω–¥–µ
  const webLayout = await webClient.saveLayout(actualSessionId, finalLayout);
  
  return {
    success: true,
    sessionId: actualSessionId,
    transcription: text,
    entities: entities.entities,
    keyphrases: entities.keyphrases,
    mod3Layout,
    finalLayout,
    webLayout,
    steps: [
      { step: 'nlp', progress: 25, message: 'NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' },
      { step: 'entities', progress: 50, message: '–°—É—â–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã' },
      { step: 'visual-mapping', progress: 75, message: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' },
      { step: 'save', progress: 90, message: 'Layout —Å–æ—Ö—Ä–∞–Ω–µ–Ω' },
      { step: 'complete', progress: 100, message: '–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω' }
    ]
  };
}

export default VoiceToLayoutFlow;
