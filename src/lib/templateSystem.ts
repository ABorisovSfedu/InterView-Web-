// –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤ Mod3 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
import { VisualElement } from '../types/visualElements';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ Mod3
export interface Mod3Template {
  id: string;
  name: string;
  priority: number;
  triggers: string[];
  sections: {
    hero: string[];
    main: string[];
    footer: string[];
  };
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Mod3
export interface Mod3Component {
  component: string;
  props: Record<string, any>;
  confidence: number;
  match_type: string;
  term: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Mod3
export interface Mod3LayoutResponse {
  status: string;
  session_id: string;
  layout: {
    template: string;
    sections: {
      hero: Mod3Component[];
      main: Mod3Component[];
      footer: Mod3Component[];
    };
    count: number;
  };
  matches: Mod3Component[];
  explanations: Array<{
    term: string;
    matched_component: string;
    match_type: string;
    score: number;
  }>;
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã Mod3
export const MOD3_TEMPLATES: Mod3Template[] = [
  {
    id: 'ecommerce-landing',
    name: 'E-commerce Landing',
    priority: 1,
    triggers: ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä—ã', '–∫–æ—Ä–∑–∏–Ω–∞', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥–∞–∂–∞', '–º–∞–≥–∞–∑–∏–Ω', 'ecommerce'],
    sections: {
      hero: ['ui.hero', 'ui.search'],
      main: ['ui.productGrid', 'ui.filters', 'ui.cta'],
      footer: ['ui.footer']
    }
  },
  {
    id: 'hero-main-footer',
    name: 'Hero Main Footer',
    priority: 2,
    triggers: ['–º–µ–Ω—é', '–Ω–∞–≤–∏–≥–∞—Ü–∏—è', 'navbar', '—à–∞–ø–∫–∞', '—Å–∞–π—Ç', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞'],
    sections: {
      hero: ['ui.hero', 'ui.navbar'],
      main: ['ui.text', 'ui.button', 'ui.form'],
      footer: ['ui.footer']
    }
  },
  {
    id: 'cards-landing',
    name: 'Cards Landing',
    priority: 3,
    triggers: ['–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', '–∫–µ–π—Å—ã', '–Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã', '–≥–∞–ª–µ—Ä–µ—è', '–ø—Ä–æ–µ–∫—Ç—ã', '—Ä–∞–±–æ—Ç—ã'],
    sections: {
      hero: ['ui.hero'],
      main: ['ui.cards', 'ui.text'],
      footer: ['ui.footer']
    }
  },
  {
    id: 'one-column',
    name: 'One Column',
    priority: 4,
    triggers: ['–ª–µ–Ω–¥–∏–Ω–≥', '–ø—Ä–æ–º–æ', '–æ–¥–Ω–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ–∫—Ü–∏—è–º–∏', 'landing'],
    sections: {
      hero: ['ui.hero'],
      main: ['ui.section', 'ui.text', 'ui.button'],
      footer: ['ui.footer']
    }
  }
];

// –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Mod3 –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
export const COMPONENT_MAPPING: Record<string, Partial<VisualElement>> = {
  // Hero —Å–µ–∫—Ü–∏—è
  'ui.hero': {
    type: 'hero',
    category: 'basic',
    name: 'Hero –±–∞–Ω–Ω–µ—Ä',
    description: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–Ω–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
    icon: 'üéØ',
    content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    width: 600,
    height: 200,
    props: { variant: 'hero' },
    styles: {
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      color: 'white',
      textAlign: 'center',
      padding: '40px 20px',
      borderRadius: '12px'
    }
  },
  'ui.navbar': {
    type: 'navbar',
    category: 'navigation',
    name: '–ù–∞–≤–∏–≥–∞—Ü–∏—è',
    description: '–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å',
    icon: 'üß≠',
    content: '–ì–ª–∞–≤–Ω–∞—è | –û –Ω–∞—Å | –£—Å–ª—É–≥–∏ | –ö–æ–Ω—Ç–∞–∫—Ç—ã',
    width: 600,
    height: 50,
    props: { links: ['–ì–ª–∞–≤–Ω–∞—è', '–û –Ω–∞—Å', '–£—Å–ª—É–≥–∏', '–ö–æ–Ω—Ç–∞–∫—Ç—ã'] },
    styles: {
      backgroundColor: '#1f2937',
      color: 'white',
      padding: '12px',
      display: 'flex',
      alignItems: 'center',
      gap: '24px'
    }
  },
  'ui.search': {
    type: 'search',
    category: 'forms',
    name: '–ü–æ–∏—Å–∫',
    description: '–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
    icon: 'üîç',
    content: '',
    width: 300,
    height: 40,
    props: { placeholder: '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...' },
    styles: {
      border: '2px solid #e5e7eb',
      borderRadius: '8px',
      padding: '8px 16px',
      fontSize: '16px'
    }
  },

  // Main —Å–µ–∫—Ü–∏—è
  'ui.text': {
    type: 'text',
    category: 'basic',
    name: '–¢–µ–∫—Å—Ç',
    description: '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
    icon: 'üìÑ',
    content: '–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏',
    width: 500,
    height: 80,
    props: {},
    styles: {
      fontSize: '16px',
      lineHeight: '1.6',
      color: '#374151',
      padding: '16px'
    }
  },
  'ui.button': {
    type: 'button',
    category: 'basic',
    name: '–ö–Ω–æ–ø–∫–∞',
    description: '–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è',
    icon: 'üîò',
    content: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
    width: 150,
    height: 50,
    props: { variant: 'primary' },
    styles: {
      backgroundColor: '#3b82f6',
      color: 'white',
      border: 'none',
      borderRadius: '8px',
      padding: '12px 24px',
      fontSize: '16px',
      cursor: 'pointer'
    }
  },
  'ui.form': {
    type: 'form',
    category: 'forms',
    name: '–§–æ—Ä–º–∞',
    description: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
    icon: 'üìù',
    content: '',
    width: 350,
    height: 250,
    props: { fields: ['name', 'email', 'message'] },
    styles: {
      backgroundColor: '#f9fafb',
      border: '1px solid #e5e7eb',
      borderRadius: '8px',
      padding: '20px'
    }
  },
  'ui.cta': {
    type: 'cta',
    category: 'basic',
    name: '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
    description: '–ë–ª–æ–∫ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
    icon: 'üì¢',
    content: '–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
    width: 400,
    height: 80,
    props: { variant: 'cta' },
    styles: {
      backgroundColor: '#fef3c7',
      border: '2px solid #f59e0b',
      borderRadius: '8px',
      padding: '16px',
      textAlign: 'center',
      fontSize: '16px',
      fontWeight: 'bold'
    }
  },
  'ui.section': {
    type: 'section',
    category: 'layout',
    name: '–°–µ–∫—Ü–∏—è',
    description: '–°–µ–∫—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: 'üì¶',
    content: '',
    width: 600,
    height: 150,
    props: {},
    styles: {
      backgroundColor: '#ffffff',
      border: '1px solid #e5e7eb',
      borderRadius: '8px',
      padding: '24px'
    }
  },
  'ui.container': {
    type: 'container',
    category: 'layout',
    name: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä',
    description: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
    icon: 'üì¶',
    content: '',
    width: 600,
    height: 200,
    props: {},
    styles: {
      backgroundColor: '#f9fafb',
      border: '2px dashed #d1d5db',
      borderRadius: '8px',
      padding: '20px'
    }
  },

  // –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
  'ui.card': {
    type: 'card',
    category: 'content',
    name: '–ö–∞—Ä—Ç–æ—á–∫–∞',
    description: '–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    icon: 'üÉè',
    content: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏',
    width: 300,
    height: 200,
    props: {},
    styles: {
      backgroundColor: 'white',
      border: '1px solid #e5e7eb',
      borderRadius: '8px',
      padding: '20px',
      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
    }
  },
  'ui.cards': {
    type: 'cards',
    category: 'content',
    name: '–°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫',
    description: '–°–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫',
    icon: 'üÉè',
    content: '',
    width: 600,
    height: 200,
    props: { columns: 3 },
    styles: {
      display: 'grid',
      gridTemplateColumns: 'repeat(3, 1fr)',
      gap: '16px',
      padding: '16px'
    }
  },
  'ui.productCard': {
    type: 'productCard',
    category: 'content',
    name: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞',
    description: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞',
    icon: 'üõçÔ∏è',
    content: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n–¶–µ–Ω–∞: 1000‚ÇΩ',
    width: 250,
    height: 350,
    props: { price: '1000‚ÇΩ' },
    styles: {
      backgroundColor: 'white',
      border: '1px solid #e5e7eb',
      borderRadius: '8px',
      padding: '16px',
      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
    }
  },
  'ui.productGrid': {
    type: 'productGrid',
    category: 'content',
    name: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
    description: '–°–µ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤',
    icon: 'üõçÔ∏è',
    content: '',
    width: 600,
    height: 300,
    props: { columns: 4 },
    styles: {
      display: 'grid',
      gridTemplateColumns: 'repeat(4, 1fr)',
      gap: '16px',
      padding: '16px'
    }
  },

  // –ú–µ–¥–∏–∞
  'ui.image': {
    type: 'image',
    category: 'media',
    name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    icon: 'üñºÔ∏è',
    content: '',
    width: 300,
    height: 200,
    props: { src: '', alt: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' },
    styles: {
      backgroundColor: '#f3f4f6',
      border: '2px dashed #d1d5db',
      borderRadius: '8px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      color: '#6b7280'
    }
  },
  'ui.imageGallery': {
    type: 'gallery',
    category: 'media',
    name: '–ì–∞–ª–µ—Ä–µ—è',
    description: '–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    icon: 'üñºÔ∏è',
    content: '',
    width: 500,
    height: 250,
    props: { columns: 3 },
    styles: {
      display: 'grid',
      gridTemplateColumns: 'repeat(3, 1fr)',
      gap: '8px',
      backgroundColor: '#f9fafb',
      padding: '16px',
      borderRadius: '8px'
    }
  },

  // Footer —Å–µ–∫—Ü–∏—è
  'ui.footer': {
    type: 'footer',
    category: 'navigation',
    name: '–ü–æ–¥–≤–∞–ª',
    description: '–ü–æ–¥–≤–∞–ª —Å–∞–π—Ç–∞',
    icon: 'ü¶∂',
    content: '¬© 2024 –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.',
    width: 600,
    height: 60,
    props: {},
    styles: {
      backgroundColor: '#1f2937',
      color: 'white',
      padding: '16px',
      textAlign: 'center',
      fontSize: '14px'
    }
  },

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  'ui.heading': {
    type: 'header',
    category: 'basic',
    name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
    description: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏',
    icon: 'üìù',
    content: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
    width: 400,
    height: 40,
    props: { level: 2 },
    styles: {
      fontSize: '24px',
      fontWeight: 'bold',
      color: '#1f2937',
      marginBottom: '16px'
    }
  },
  'ui.list': {
    type: 'list',
    category: 'content',
    name: '–°–ø–∏—Å–æ–∫',
    description: '–°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
    icon: 'üìã',
    content: '‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç 1\n‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç 2\n‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç 3',
    width: 300,
    height: 100,
    props: { type: 'ul' },
    styles: {
      padding: '16px',
      backgroundColor: 'white',
      border: '1px solid #e5e7eb',
      borderRadius: '8px'
    }
  },
  'ui.grid': {
    type: 'grid',
    category: 'layout',
    name: '–°–µ—Ç–∫–∞',
    description: 'CSS Grid –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä',
    icon: '‚äû',
    content: '',
    width: 500,
    height: 150,
    props: { columns: 3 },
    styles: {
      display: 'grid',
      gridTemplateColumns: 'repeat(3, 1fr)',
      gap: '16px',
      backgroundColor: '#f3f4f6',
      padding: '16px',
      borderRadius: '8px'
    }
  }
};

// –°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–∫—Ü–∏—è–º
export class TemplatePositioningSystem {
  private canvasWidth = 1200; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–Ω–≤–∞—Å–∞
  private canvasHeight = 1500; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–∞–Ω–≤–∞—Å–∞
  
  // –†–∞–∑–º–µ—Ä—ã —Å–µ–∫—Ü–∏–π - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
  private sectionDimensions = {
    hero: { width: this.canvasWidth, height: 500, y: 0 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É hero
    main: { width: this.canvasWidth, height: 800, y: 500 }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É main
    footer: { width: this.canvasWidth, height: 200, y: 1300 } // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É footer
  };

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
  private positionElementsInSection(
    components: Mod3Component[], 
    sectionName: 'hero' | 'main' | 'footer'
  ): VisualElement[] {
    const section = this.sectionDimensions[sectionName];
    const elements: VisualElement[] = [];
    
    let currentY = section.y + 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–∞ —Å–µ–∫—Ü–∏–∏
    let currentX = 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    let maxHeightInRow = 0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ä—è–¥—É
    
    console.log(`üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${components.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ ${sectionName}`);
    
    for (let i = 0; i < components.length; i++) {
      const component = components[i];
      const baseElement = COMPONENT_MAPPING[component.component];
      
      if (!baseElement) {
        console.warn(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.component} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ`);
        continue;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç full-width
      const isFullWidthElement = ['header', 'navbar', 'hero', 'footer'].includes(baseElement.type);

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥ —Å–µ–∫—Ü–∏—é
      let elementWidth = baseElement.width || 200;
      let elementHeight = baseElement.height || 100;
      
      // –î–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–∞–Ω–≤–∞—Å–∞
      if (isFullWidthElement) {
        elementWidth = 1200; // –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞
        currentX = 0; // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Å –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
      } else if (sectionName === 'hero') {
        // –î–ª—è hero —Å–µ–∫—Ü–∏–∏ –¥–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        elementWidth = Math.min(elementWidth, section.width - 40);
      }
      
      // –î–ª—è main —Å–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ç–∫—É 3 –∫–æ–ª–æ–Ω–∫–∏
      if (sectionName === 'main') {
        const maxColumns = 3;
        const columnWidth = (section.width - 60) / maxColumns; // 60px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤
        elementWidth = Math.min(elementWidth, columnWidth);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
      if (currentX + elementWidth > section.width - 20) {
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        currentX = 20;
        currentY += maxHeightInRow + 20;
        maxHeightInRow = 0;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–µ–∫—Ü–∏–∏
      if (currentY + elementHeight > section.y + section.height - 20) {
        console.warn(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${component.component} –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Å–µ–∫—Ü–∏—é ${sectionName}`);
        // –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–∞
        elementHeight = Math.max(50, section.y + section.height - currentY - 20);
      }

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const element: VisualElement = {
        id: `${component.component}-${sectionName}-${i}-${Date.now()}`,
        type: baseElement.type || 'text',
        category: baseElement.category || 'basic',
        name: baseElement.name || component.component,
        description: baseElement.description || '',
        icon: baseElement.icon || 'üìÑ',
        content: this.generateContentFromProps(component.props, component.term),
        x: currentX,
        y: currentY,
        width: elementWidth,
        height: elementHeight,
        zIndex: 1,
        opacity: 1,
        locked: false,
        visible: true,
        props: { ...baseElement.props, ...component.props },
        styles: { ...baseElement.styles }
      };

      elements.push(element);
      
      console.log(`üìç –≠–ª–µ–º–µ–Ω—Ç ${component.component} —Ä–∞–∑–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (${currentX}, ${currentY}) —Ä–∞–∑–º–µ—Ä–æ–º ${elementWidth}x${elementHeight}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (isFullWidthElement) {
        // –î–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y
        currentY += elementHeight + 30;
        maxHeightInRow = elementHeight;
      } else if (sectionName === 'hero') {
        // –í hero —Å–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        currentY += elementHeight + 30; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø
        maxHeightInRow = elementHeight;
      } else if (sectionName === 'main') {
        // –í main —Å–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤ —Å–µ—Ç–∫–µ 3 –∫–æ–ª–æ–Ω–∫–∏
        currentX += elementWidth + 20;
        maxHeightInRow = Math.max(maxHeightInRow, elementHeight);
        
        // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ä—è–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if (currentX + elementWidth > section.width - 20) {
          currentX = 20;
          currentY += maxHeightInRow + 20;
          maxHeightInRow = 0;
        }
      } else if (sectionName === 'footer') {
        // –í footer —Å–µ–∫—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
        currentX += elementWidth + 20;
        maxHeightInRow = Math.max(maxHeightInRow, elementHeight);
      }
    }

    console.log(`‚úÖ –†–∞–∑–º–µ—â–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏ ${sectionName}`);
    return elements;
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
  private groupComponentsByType(components: Mod3Component[]): Record<string, Mod3Component[]> {
    const grouped: Record<string, Mod3Component[]> = {};
    
    components.forEach(component => {
      const type = component.component.split('.')[1] || component.component;
      if (!grouped[type]) {
        grouped[type] = [];
      }
      grouped[type].push(component);
    });
    
    return grouped;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ props –∏ term
  private generateContentFromProps(props: Record<string, any>, term: string): string {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ props, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (props.text) return props.text;
    if (props.title) return props.title;
    if (props.content) return props.content;
    
    // –ò–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ term
    const termContent: Record<string, string> = {
      '–∑–∞–≥–æ–ª–æ–≤–æ–∫': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      '—Ç–µ–∫—Å—Ç': '–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏',
      '–∫–Ω–æ–ø–∫–∞': '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
      '—Ñ–æ—Ä–º–∞': '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
      '–∫–∞—Ä—Ç–æ—á–∫–∞': '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞',
      '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      '–ø–æ–∏—Å–∫': '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤',
      '–Ω–∞–≤–∏–≥–∞—Ü–∏—è': '–ì–ª–∞–≤–Ω–∞—è | –û –Ω–∞—Å | –£—Å–ª—É–≥–∏ | –ö–æ–Ω—Ç–∞–∫—Ç—ã',
      '–ø–æ–¥–≤–∞–ª': '¬© 2024 –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.'
    };
    
    return termContent[term] || term;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Mod3
  public createElementsFromMod3Response(response: Mod3LayoutResponse): VisualElement[] {
    const allElements: VisualElement[] = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
    const sections = response.layout.sections;
    
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º header/navbar —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
    const headerElements: Mod3Component[] = [];
    const heroElements: Mod3Component[] = [];
    const mainElements: Mod3Component[] = [];
    const footerElements: Mod3Component[] = [];
    
    // –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
    [...(sections.hero || []), ...(sections.main || []), ...(sections.footer || [])].forEach(component => {
      const baseElement = COMPONENT_MAPPING[component.component];
      if (baseElement) {
        if (['header', 'navbar'].includes(baseElement.type)) {
          headerElements.push(component);
        } else if (['hero'].includes(baseElement.type)) {
          heroElements.push(component);
        } else if (['footer'].includes(baseElement.type)) {
          footerElements.push(component);
        } else {
          mainElements.push(component);
        }
      }
    });
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    let globalY = 0; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    
    // 1. Header/Navbar —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∞–º—ã–µ –ø–µ—Ä–≤—ã–µ)
    if (headerElements.length > 0) {
      const positionedHeaderElements = this.positionElementsSequentially(headerElements, globalY, 'header');
      allElements.push(...positionedHeaderElements);
      globalY = Math.max(...positionedHeaderElements.map(el => el.y + el.height)) + 20;
    }
    
    // 2. Hero —ç–ª–µ–º–µ–Ω—Ç—ã
    if (heroElements.length > 0) {
      const positionedHeroElements = this.positionElementsSequentially(heroElements, globalY, 'hero');
      allElements.push(...positionedHeroElements);
      globalY = Math.max(...positionedHeroElements.map(el => el.y + el.height)) + 20;
    }
    
    // 3. Main —ç–ª–µ–º–µ–Ω—Ç—ã (–≤ —Å–µ—Ç–∫–µ)
    if (mainElements.length > 0) {
      const positionedMainElements = this.positionElementsInGrid(mainElements, globalY);
      allElements.push(...positionedMainElements);
      globalY = Math.max(...positionedMainElements.map(el => el.y + el.height)) + 20;
    }
    
    // 4. Footer —ç–ª–µ–º–µ–Ω—Ç—ã (—Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)
    if (footerElements.length > 0) {
      const positionedFooterElements = this.positionElementsSequentially(footerElements, globalY, 'footer');
      allElements.push(...positionedFooterElements);
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${allElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ`);
    return allElements;
  }

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–¥–ª—è header, hero, footer)
  private positionElementsSequentially(
    components: Mod3Component[], 
    startY: number, 
    elementType: 'header' | 'hero' | 'footer'
  ): VisualElement[] {
    const elements: VisualElement[] = [];
    let currentY = startY;
    
    console.log(`üéØ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${components.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ ${elementType} –Ω–∞—á–∏–Ω–∞—è —Å Y=${startY}`);
    
    for (let i = 0; i < components.length; i++) {
      const component = components[i];
      const baseElement = COMPONENT_MAPPING[component.component];
      
      if (!baseElement) {
        console.warn(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.component} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ`);
        continue;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç full-width
      const isFullWidthElement = ['header', 'navbar', 'hero', 'footer'].includes(baseElement.type);

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let elementWidth = baseElement.width || 200;
      let elementHeight = baseElement.height || 100;
      
      // –î–ª—è full-width —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–∞–Ω–≤–∞—Å–∞
      if (isFullWidthElement) {
        elementWidth = 1200; // –ü–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–≤–∞—Å–∞
      }

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const element: VisualElement = {
        id: `${component.component}-${elementType}-${i}-${Date.now()}`,
        type: baseElement.type || 'text',
        category: baseElement.category || 'basic',
        name: baseElement.name || component.component,
        description: baseElement.description || '',
        icon: baseElement.icon || 'üìÑ',
        content: this.generateContentFromProps(component.props, component.term),
        x: isFullWidthElement ? 0 : 20, // Full-width —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
        y: currentY,
        width: elementWidth,
        height: elementHeight,
        zIndex: 1,
        opacity: 1,
        locked: false,
        visible: true,
        props: { ...baseElement.props, ...component.props },
        styles: { ...baseElement.styles }
      };

      elements.push(element);
      
      console.log(`üìç –≠–ª–µ–º–µ–Ω—Ç ${component.component} —Ä–∞–∑–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (${element.x}, ${element.y}) —Ä–∞–∑–º–µ—Ä–æ–º ${elementWidth}x${elementHeight}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
      currentY += elementHeight + 20; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    }
    
    console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∏–ø–∞ ${elementType}`);
    return elements;
  }

  // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ (–¥–ª—è main —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
  private positionElementsInGrid(components: Mod3Component[], startY: number): VisualElement[] {
    const elements: VisualElement[] = [];
    const maxColumns = 3;
    const columnWidth = (1200 - 80) / maxColumns; // 80px –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ (20px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã + 20px –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏)
    const rowHeight = 200; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Ä—è–¥–∞
    
    let currentY = startY;
    let currentX = 20; // –û—Ç—Å—Ç—É–ø –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è
    let currentColumn = 0;
    
    console.log(`üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${components.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∫–µ –Ω–∞—á–∏–Ω–∞—è —Å Y=${startY}`);
    
    for (let i = 0; i < components.length; i++) {
      const component = components[i];
      const baseElement = COMPONENT_MAPPING[component.component];
      
      if (!baseElement) {
        console.warn(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${component.component} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ`);
        continue;
      }

      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥ —Å–µ—Ç–∫—É
      let elementWidth = Math.min(baseElement.width || 200, columnWidth);
      let elementHeight = Math.min(baseElement.height || 100, rowHeight - 20); // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤

      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
      currentX = 20 + currentColumn * (columnWidth + 20);

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      const element: VisualElement = {
        id: `${component.component}-main-${i}-${Date.now()}`,
        type: baseElement.type || 'text',
        category: baseElement.category || 'basic',
        name: baseElement.name || component.component,
        description: baseElement.description || '',
        icon: baseElement.icon || 'üìÑ',
        content: this.generateContentFromProps(component.props, component.term),
        x: currentX,
        y: currentY,
        width: elementWidth,
        height: elementHeight,
        zIndex: 1,
        opacity: 1,
        locked: false,
        visible: true,
        props: { ...baseElement.props, ...component.props },
        styles: { ...baseElement.styles }
      };

      elements.push(element);
      
      console.log(`üìç –≠–ª–µ–º–µ–Ω—Ç ${component.component} —Ä–∞–∑–º–µ—â–µ–Ω –≤ —Å–µ—Ç–∫–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ (${element.x}, ${element.y}) —Ä–∞–∑–º–µ—Ä–æ–º ${elementWidth}x${elementHeight}`);

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ
      currentColumn++;
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ä—è–¥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
      if (currentColumn >= maxColumns) {
        currentColumn = 0;
        currentY += rowHeight;
      }
    }
    
    console.log(`‚úÖ –í —Å–µ—Ç–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    return elements;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ
  public getTemplateInfo(templateId: string): Mod3Template | undefined {
    return MOD3_TEMPLATES.find(template => template.id === templateId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
  public getAllTemplates(): Mod3Template[] {
    return MOD3_TEMPLATES;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
export const templatePositioningSystem = new TemplatePositioningSystem();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ Mod3 –æ—Ç–≤–µ—Ç–∞
export const createElementsFromMod3 = (response: Mod3LayoutResponse): VisualElement[] => {
  return templatePositioningSystem.createElementsFromMod3Response(response);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–±–ª–æ–Ω–µ
export const getTemplateInfo = (templateId: string): Mod3Template | undefined => {
  return templatePositioningSystem.getTemplateInfo(templateId);
};

export default templatePositioningSystem;
